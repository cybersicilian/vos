// @bun
var N;(function(z){z[z["DECK"]=0]="DECK";z[z["TOP_DECK"]=1]="TOP_DECK";z[z["BOTTOM_DECK"]=2]="BOTTOM_DECK";z[z["RANDOM_DECK"]=3]="RANDOM_DECK";z[z["HAND"]=4]="HAND";z[z["DISCARD"]=5]="DISCARD";z[z["NONE"]=6]="NONE"})(N||(N={}));class Z extends Array{constructor(){super(...arguments)}discardPile=[];props={};set($){return this.splice(0,this.length,...$),this}asArray(){return this}addCard($,J=1){for(let K=0;K<J;K++)this.push($.clone().setZone(N.DECK));return this}addCards($){return this.push(...$.map((J)=>J.clone().setZone(N.DECK))),this}shuffle(){for(let $=this.length-1;$>0;$--){const J=Math.floor(Math.random()*$),K=this[$];this[$]=this[J],this[J]=K}}reshuffle(){this.push(...this.discardPile.map(($)=>$.setZone(N.DECK))),this.discardPile=[],this.shuffle()}draw($=1){let J=[];for(let K=0;K<$;K++){if(this.length===0)this.reshuffle();J.push(this.pop().setZone(N.HAND))}return J}static fromCardList($,J){let K={};for(let W of J){if(!K[W.getRarity()])K[W.getRarity()]=0;K[W.getRarity()]++}let Q={},V=0;for(let W of Object.keys(K))Q[W]=$*Math.pow(0.75,Object.keys(K).indexOf(W)),V+=Q[W];for(let W of Object.keys(K))Q[W]=Math.round(Q[W]/V*$);let F=new Z;for(let W of J)F.addCard(W.clone(),Q[W.getRarity()]);return F}}var L;(function(F){F[F["PLAYER"]=0]="PLAYER";F[F["OPPONENT"]=1]="OPPONENT";F[F["CARD_IN_HAND"]=2]="CARD_IN_HAND";F[F["CARD_IN_DISCARD"]=3]="CARD_IN_DISCARD";F[F["CARD"]=4]="CARD"})(L||(L={}));var O;(function(j){j[j["SELF"]=0]="SELF";j[j["OPPONENT_MOST_CARDS"]=1]="OPPONENT_MOST_CARDS";j[j["OPPONENT_LEAST_CARDS"]=2]="OPPONENT_LEAST_CARDS";j[j["OPPONENT_RANDOM"]=3]="OPPONENT_RANDOM";j[j["PLAYER_RANDOM"]=4]="PLAYER_RANDOM";j[j["PLAYER_MOST_CARDS"]=5]="PLAYER_MOST_CARDS";j[j["PLAYER_LEAST_CARDS"]=6]="PLAYER_LEAST_CARDS";j[j["CARD_IN_HAND_LEAST_POWER"]=7]="CARD_IN_HAND_LEAST_POWER";j[j["CARD_IN_HAND_MOST_POWER"]=8]="CARD_IN_HAND_MOST_POWER";j[j["CARD_IN_HAND_RANDOM"]=9]="CARD_IN_HAND_RANDOM";j[j["CARD_IN_DISCARD_LEAST_POWER"]=10]="CARD_IN_DISCARD_LEAST_POWER";j[j["CARD_IN_DISCARD_MOST_POWER"]=11]="CARD_IN_DISCARD_MOST_POWER";j[j["CARD_IN_DISCARD_RANDOM"]=12]="CARD_IN_DISCARD_RANDOM";j[j["OPPONENT_MOST_TURNS_REMAINING"]=13]="OPPONENT_MOST_TURNS_REMAINING";j[j["OPPONENT_LEAST_TURNS_REMAINING"]=14]="OPPONENT_LEAST_TURNS_REMAINING";j[j["PLAYER_MOST_TURNS_REMAINING"]=15]="PLAYER_MOST_TURNS_REMAINING";j[j["PLAYER_LEAST_TURNS_REMAINING"]=16]="PLAYER_LEAST_TURNS_REMAINING"})(O||(O={}));var H;(function(z){z[z["BASIC"]=0]="BASIC";z[z["COMMON"]=1]="COMMON";z[z["UNCOMMON"]=2]="UNCOMMON";z[z["RARE"]=3]="RARE";z[z["MYTHIC"]=4]="MYTHIC";z[z["LEGENDARY"]=5]="LEGENDARY";z[z["HAXOR"]=6]="HAXOR"})(H||(H={}));class B{callback;cachedValue;value=!1;constructor($){if(this.callback=$,typeof $!=="function")this.value=!0,this.cachedValue=$}resolve(...$){if(this.value)return this.cachedValue;return this.callback(...$)}getCallback(){return this.callback}}class Y{name;abilities=[];power=1;rarity=H.COMMON;canPlay=new B(!0);canGive=new B(!0);discardable=!0;zone=N.NONE;props={};constructor($,J){this.name=$,this.abilities=J}setZone($){return this.zone=$,this}remove($){this.move(N.NONE,$)}move($,J,K){let Q=this.zone;switch(Q){case N.DECK:J.deck.splice(J.deck.indexOf(this),1);break;case N.HAND:if(K&&K.from)K.from.cih().splice(K.from.cih().indexOf(this),1);else J.owner.cih().splice(J.owner.cih().indexOf(this),1);break;case N.DISCARD:J.deck.discardPile.splice(J.deck.discardPile.indexOf(this),1);break}if(this.fireEvents(`moveFrom_${Object.values(N)[Q]}`,J),$!==N.NONE){switch($){case N.DECK:case N.RANDOM_DECK:J.deck.push(this),J.deck.shuffle();break;case N.TOP_DECK:J.deck.unshift(this);break;case N.BOTTOM_DECK:J.deck.push(this);break;case N.DISCARD:J.deck.discardPile.push(this);break;case N.HAND:if(K&&K.to)K.to.cih().push(this);else J.owner.cih().push(this);break}if(this.zone=$,this.zone===N.TOP_DECK||this.zone===N.BOTTOM_DECK||this.zone===N.RANDOM_DECK)this.zone=N.DECK;this.fireEvents(`moveTo_${Object.values(N)[this.zone]}`,J)}else this.zone=$}setCanPlay($){return this.canPlay=new B($),this}setCanGive($){return this.canGive=new B($),this}setProps($){return this.props=$,this}setProp($,J,K){return this.props[$]=J,this}addAbility($){return this.abilities.push($),this}getChoices($){return this.orderAbilities().map((J)=>{return J.informChoices({...$,card:this})}).flat()}skipDiscard(){return this.discardable=!1,this}doSkipDiscard(){return!this.discardable}getProps(){return this.props}getProp($){return this.getProps()[$]}clone(){let $=new Y(this.name,this.abilities.map((J)=>J.clone()));return $.setPow(this.power),$.setRarity(this.rarity),$.setCanPlay(this.canPlay.getCallback()),$.setCanGive(this.canGive.getCallback()),$.setProps({...this.props}),$}canBePlayed($){if(this.abilities.map((K)=>K.canBePlayed($)).includes(!1))return!1;return this.canPlay.resolve($)}canBeGiven($,J){if(this.abilities.map((Q)=>Q.canBeGiven($,J)).includes(!1))return!1;return this.canGive.resolve($,J)}setRarity($){return this.rarity=$,this}getRarity(){return this.rarity}getAbilities(){return this.abilities}getName(){return this.name}setName($){return this.name=$,this}toCardState(){return{name:this.name,power:this.power,rarity:this.rarity,text:this.getText(),props:this.props}}getLogText(){return`\xA7\xA7${this.name}\xA7card\xA7${JSON.stringify(this.toCardState())}\xA7\xA7`}pow(){return Math.min(this.power,999)}setPow($){if(this.power=$,this.power>999)this.power=999;return this}explode($){this.move(N.NONE,$);let J=[];if(this.getProp("fragment"))return J;else{let K=1;for(let Q of this.orderAbilities()){let V=new Y(`${this.getName()} Fragment #${K}`,[Q.clone()]).setPow(this.pow()).setRarity(this.getRarity()).setProps({...this.props});V.setProp("fragment",!0),K++,J.push(V)}return J}}orderAbilities(){return this.abilities.sort(($,J)=>{if($.constructor.name==="CostAbility"&&J.constructor.name!=="CostAbility")return-1;else if($.constructor.name!=="CostAbility"&&J.constructor.name==="CostAbility")return 1;else if($.constructor.name==="PlayerRestrictionAbility"&&J.constructor.name!=="PlayerRestrictionAbility")return-1;else if($.constructor.name!=="PlayerRestrictionAbility"&&J.constructor.name==="PlayerRestrictionAbility")return 1;else if($.constructor.name==="PlayerRestrictionAbilityNeg"&&J.constructor.name!=="PlayerRestrictionAbilityNeg")return-1;else if($.constructor.name!=="PlayerRestrictionAbilityNeg"&&J.constructor.name==="PlayerRestrictionAbilityNeg")return 1;else if($.constructor.name==="PlayerPredicateRestrictionAbility"&&J.constructor.name!=="PlayerPredicateRestrictionAbility")return-1;else if($.constructor.name!=="PlayerPredicateRestrictionAbility"&&J.constructor.name==="PlayerPredicateRestrictionAbility")return 1;else if($.hasRestriction()&&!J.hasRestriction())return-1;else if(!$.hasRestriction()&&J.hasRestriction())return 1;return 0})}fireEvents($,J){for(let K of this.orderAbilities())K.fireEvents($,J)}play($,J,K,Q){let V=0;if(this.canBePlayed({owner:$,opps:J,deck:K,card:this}))for(let F of this.orderAbilities()){let W=Q?Q[V]:void 0;F.fireEvents("play",{owner:$,opps:J,deck:K,card:this,choices:W}),V++}}draw($,J,K){for(let Q of this.orderAbilities())Q.fireEvents("draw",{owner:$,opps:J,deck:K,card:this})}give($,J,K){for(let Q of this.orderAbilities())Q.fireEvents("give",{owner:$,opps:J,deck:K,card:this})}discard($,J,K){for(let Q of this.orderAbilities())Q.fireEvents("discard",{owner:$,opps:J,deck:K,card:this})}getText(){return this.orderAbilities().map((J)=>J.getText()).join("\n")}getFormulatedText($){return this.orderAbilities().map((K)=>K.getFormulatedText($)).join("\n")}getFormulas(){return this.orderAbilities().map((J)=>{if(J.hasFormula())return J.getFormula();return""})}getTraits($){let K=this.orderAbilities().map((V)=>{return V.ai()}),Q={profile:{}};for(let V of K)for(let F of Object.keys(V)){let W=new B(V[F]).resolve($);if(Q.profile[F])Q.profile[F]+=W;else Q.profile[F]=W}return Q}static combine(...$){let J=$.map((V)=>V.clone()),K=new Y(J.map((V)=>V.getName()).join(" + "),[...J.map((V)=>V.getAbilities()).flat()]);K.setPow(Math.floor(J.map((V)=>V.pow()).reduce((V,F)=>V+F,0)/J.length)),K.setRarity(Math.floor(J.map((V)=>V.getRarity()).reduce((V,F)=>V+F,0)/J.length)),K.setCanPlay((V)=>{for(let F of J)if(!F.canBePlayed(V))return!1;return!0});let Q={};for(let V of J)Q={...Q,...V.getProps()};return K.setProps(Q),K}}var L1={Jesse:{collectResource:10,spendResource:-15,affectsSelf:5,affectsOpponents:20,changesGame:5,meme:10,oppWinSetback:50,discardOpponentCards:10},Ian:{collectResource:20,spendResource:10,drawsCards:10,changesGame:10,affectsSelf:15,discardsCards:-10,unlockUpgrades:10}},R=L1;class m{optimality=1;profile={};profileName="";constructor($=""){if(R[$])this.profileName=$;else this.profileName=Object.keys(R)[Math.floor(Math.random()*Object.keys(R).length)];this.profile=R[this.profileName]}getProfileName(){return this.profileName}getProfile(){return this.profile}static makeSpecificChoice($,J){let K=[];if(J.pointer instanceof Function)K.push(J.pointer($));else switch(J.pointer){case O.SELF:K.push($.owner);break;case O.OPPONENT_MOST_CARDS:K.push(...$.opps.sort((V,F)=>F.inHand()-V.inHand()));break;case O.OPPONENT_LEAST_CARDS:K.push(...$.opps.sort((V,F)=>V.inHand()-F.inHand()));break;case O.OPPONENT_RANDOM:let Q=$.opps.sort(()=>Math.random()-0.5);K.push(...Q);break;case O.CARD_IN_DISCARD_LEAST_POWER:K.push(...$.deck.discardPile.sort((V,F)=>{if(!V||!F)return 0;return V.pow()-F.pow()}));break;case O.CARD_IN_DISCARD_MOST_POWER:K.push(...$.deck.discardPile.sort((V,F)=>{if(!V||!F)return 0;return F.pow()-V.pow()}));break;case O.CARD_IN_DISCARD_RANDOM:K.push(...$.owner.cih().sort(()=>Math.random()-0.5));break;case O.CARD_IN_HAND_LEAST_POWER:K.push(...$.owner.cih().sort((V,F)=>{if(!V||!F)return 0;return V.pow()-F.pow()}));break;case O.CARD_IN_HAND_MOST_POWER:K.push(...$.owner.cih().sort((V,F)=>{if(!V||!F)return 0;return F.pow()-V.pow()}));break;case O.CARD_IN_HAND_RANDOM:K.push(...$.owner.cih().sort(()=>Math.random()-0.5));break;case O.PLAYER_RANDOM:K.push(...[$.owner,...$.opps].sort(()=>Math.random()-0.5));break;case O.PLAYER_MOST_CARDS:K.push(...[$.owner,...$.opps].sort((V,F)=>F.inHand()-V.inHand()));break;case O.PLAYER_LEAST_CARDS:K.push(...[$.owner,...$.opps].sort((V,F)=>V.inHand()-F.inHand()));break;case O.PLAYER_MOST_TURNS_REMAINING:K.push(...[$.owner,...$.opps].sort((V,F)=>F.getTurns()-V.getTurns()));break;case O.PLAYER_LEAST_TURNS_REMAINING:K.push(...[$.owner,...$.opps].sort((V,F)=>V.getTurns()-F.getTurns()));break;case O.OPPONENT_MOST_TURNS_REMAINING:K.push(...$.opps.sort((V,F)=>F.getTurns()-V.getTurns()));break;case O.OPPONENT_LEAST_TURNS_REMAINING:K.push(...$.opps.sort((V,F)=>V.getTurns()-F.getTurns()));break}return K}optimalityCrux($){let J=this.optimality,K=$.length,Q=(F)=>{let W=2*K,z=-(1-J)*F;return W*(1-1/(1+Math.E**z))},V=Math.random()*100;return $[Math.floor(Q(V))]}selectChoices($,J){if(!J.card)return[];else{let K=J.card.getChoices(J),Q=[];for(let V of K)Q.push(this.optimalityCrux(m.makeSpecificChoice(J,V)))}}evaluate($,J){let K=$.getTraits(J),Q=0;for(let V in K.profile)if(this.profile[V])try{Q+=K.profile[V]*this.profile[V]}catch{console.log(`Error evaluating card ${$.getName()} with weight ${V}`)}return Q}}class X{text;callback;choices=new B([]);formula="{pow}";canPlay=new B(!0);canGive=new B(!0);props={};events={};traits={};constructor($,J,K){this.text=$,this.callback=K,this.choices=new B(J),this.addEvent("play",(Q)=>{this.exec(Q)})}ai(){return this.traits}sai($,J){return this.traits={...$},this}isCostAbility(){return this.props.cost_ability??!1}clone(){let $=new X(this.text,this.choices.resolve(),this.callback);return $.setFormula(this.formula),$.setCanPlay(this.canPlay.getCallback()),$.setCanGive(this.canGive.getCallback()),$.sai(this.ai()),$}getChoices(){return this.choices.resolve()}getCallback(){return this.callback}setCanPlay($){return this.canPlay=new B($),this}setCanGive($){this.canGive=new B($)}canBePlayed($){let J=this.choices.resolve($);if(J.length>0){for(let K of J)if(K.choice===L.OPPONENT){if($.opps.length===0)return!1}else if(K.choice===L.CARD_IN_DISCARD){if(!$.deck)return!1;if($.deck.discardPile.length===0)return!1}else if(K.choice===L.CARD_IN_HAND){if($.owner.cih().length<=1)return!1}}return this.canPlay.resolve($)}canBeGiven($,J){return this.canGive.resolve($,J)}setText($){return this.text=$,this}hasRestriction(){return typeof this.canPlay==="function"||!this.canPlay}getText(){return this.text.replace("{formula}",this.textualizeFormula())}getFormulatedText($){return this.text.replace("{formula}",this.calcFormula($))}informChoices($){return this.choices.resolve($)}setFormula($){return this.formula=$,this}textualizeFormula(){let $=this.formula;for(let J in this.props)$=$.replace(`{${J}}`,this.props[J]);return $}calcFormula($){let J=this.textualizeFormula();return J=J.replace("{pow}",$.card.pow().toString()),(0, eval)(J)}makeChoices($){let J=[];for(let K of this.informChoices($)){let Q=m.makeSpecificChoice($,K),V=0;if((K.restriction??((W)=>!0))($)||J.indexOf(Q[V])!==-1&&K.distinct)while(J.indexOf(Q[V])!==-1&&V<Q.length-1)V++;if(V>=Q.length)J.push(null);J.push(Q[V])}return J}exec($){this.callback($,$.choices??this.makeChoices($))}on($,J){return this.addEvent($,J),this}addEvent($,J){if(!this.events[$])this.events[$]=[];this.events[$].push(J)}removeEvent($){if(this.events[$])delete this.events[$];return this}getEvent($){return this.events[$]}hasFormula(){return this.text.indexOf("{formula}")!==-1}getFormula(){return this.formula}fireEvents($,J){if(this.events[$])for(let K of this.events[$])K(J);if(this.events[`temp_${$}`]){for(let K of this.events[`temp_${$}`])K(J);delete this.events[`temp_${$}`]}}getProps(){return this.props}getProp($){return this.props[$]}setProp($,J){return this.props[$]=J,this}}class $1 extends X{constructor($){super("Increase the power of a card in your hand by {formula}",[{choice:L.CARD_IN_HAND,pointer:O.CARD_IN_HAND_LEAST_POWER}],(J,K)=>{if(J.choices)J.choices[0].setPow(J.choices[0].pow()+$+J.card.pow())});this.sai({improvesCard:(J)=>{return(J?J.pow?J.pow():1:1)+$}}),this.setFormula(`{pow} + ${$}`)}}class q extends X{constructor($){super("Draw {formula} cards",[],(J,K)=>{J.owner.draw(J.deck,J.card.pow()+$)});this.sai({drawsCards:(J)=>J.card.pow()+$}),this.setFormula(`{pow} + ${$}`)}}class X1 extends X{constructor($){super("Each player draws {formula} cards",[],(J,K)=>{J.owner.draw(J.deck,J.card.pow()+$);for(let Q of J.opps)Q.draw(J.deck,J.card.pow()+$)});this.sai({drawsCards:$,drawsOpponentCards:$}),this.setFormula(`{pow} + ${$}`)}}class g extends X{constructor($){super("Opponent discards {formula} cards at random",[{choice:L.OPPONENT,pointer:O.OPPONENT_MOST_CARDS}],(J,K)=>{let Q=K[0];for(let V=0;V<J.card.pow()+$;V++){if(Q.inHand()===0)break;Q.discardChoose(J)}});this.sai({affectsOpponents:(J)=>J.card.pow()+$/J.opps.length,discardsOpponentCards:(J)=>J.card.pow()+$}),this.setFormula(`{pow} + ${$}`)}}class x extends X{constructor($){super("Discard {formula} cards at random",[],(J,K)=>{J.owner.discardRandom(J)});this.sai({affectsSelf:(J)=>J.card.pow()+$,discardsCards:(J)=>J.card.pow()+$}),this.setFormula(`${$} - {pow}`)}}class Y1 extends X{qty;constructor($){super("Player discards hand, then draw {formula} cards",[{choice:L.PLAYER,pointer:(J)=>{if(J.owner.inHand()<=J.card.pow()+$)return J.owner;for(let K of J.opps)if(K.inHand()>J.card.pow()+$)return K;return[J.owner,...J.opps].sort((K,Q)=>K.inHand()-Q.inHand())[0]}}],(J,K)=>{let Q=K.pop();Q.cih().forEach((V)=>{V.move(N.DISCARD,J,{from:Q})}),Q.draw(J.deck,$+J.card.pow())});this.sai({discardsCards:1,drawsCards:$,discardsOpponentCards:1,drawsOpponentCards:$,affectsSelf:1,affectsOpponents:1}),this.setFormula(`{pow} + ${$}`)}}class n extends X{constructor(){super("Remove all other copies of this card from the game",[],($,J)=>{let K=$.opps.concat($.owner),Q=[];for(let V of K)Q.push(...V.cih().filter((F)=>{if(!F||!$.card)return!1;return F.getName()===$.card.getName()}));Q.push(...$.deck.discardPile.filter((V)=>{if(!V||!$.card)return!1;return V.getName()===$.card.getName()})),Q.push(...$.deck.filter((V)=>{if(!V||!$.card)return!1;return V.getName()===$.card.getName()})),Q.forEach((V)=>{V.remove()}),$.card.skipDiscard(),$.deck.shuffle()});this.sai({changesGame:1})}}class J1 extends X{constructor(){super("Explode a card in your hand. The new cards each have power {formula}.",[{choice:L.CARD_IN_HAND,distinct:!0,pointer:O.CARD_IN_HAND_MOST_POWER,restriction:($)=>{return!$.card.getProp("fragment")}}],($,J)=>{J[0].explode($).forEach((V)=>{V.move(N.HAND,$)})});this.sai({drawsCards:($)=>{return this.calcFormula($)},improvesCard:($)=>this.calcFormula($)})}}class I extends X{constructor($,J){super(`Add {formula} ${J}`,[],(K)=>{let Q=this.calcFormula(K),V=K.owner.getProp(`res_${J}`)??0;K.owner.setProp(`res_${J}`,V+Q,K)});if(this.setProp("resource",!0),!this.getProp("produce"))this.setProp("produce",[]);this.setProp("produce",[...this.getProp("produce"),J]),this.setFormula(`{pow} + ${$}`),this.sai({collectResource:$})}}class U extends X{constructor($,J){super(`Pay {formula} ${$}`,[],(K,Q)=>{K.owner.setProp("res_"+$,K.owner.getProp("res_"+$)-Math.max(J,0),K)});this.setProp("cost_ability",!0),this.setCanPlay((K)=>{if(!K.owner)return!1;return K.owner.getProp("res_"+$)>=J}),this.setFormula(`${J} - {pow}`),this.sai({spendResource:(K)=>this.calcFormula(K)})}}class D extends X{constructor($,J=75,K=!0,Q=!1){super(`Add the ${$.replace("_"," ").replace(" deck","")} deck to the game${K?" if it hasn't been already.":""}`,[],(V)=>{if(w[$]&&(!K||!V.deck.props[`added_${$}`]))V.deck.addCards(Z.fromCardList(J,w[$])),V.deck.shuffle()});if(K&&Q)this.setCanPlay((V)=>{return!V.deck.props[`added_${$}`]});this.sai({addCardsToDeck:J,changesGame:1}),this.setProp("deck",!0)}}class p extends X{constructor(){super("Play only if you have 0 or less res_life",[],($)=>{});this.setCanPlay(($)=>{return $.owner.getProp("res_life")&&$.owner.getProp("res_life")<=0}),this.sai({},{pbp:["res_life"]})}}class l extends X{constructor($){super(`When this card is drawn, ${$.getText()[0].toLowerCase()+$.getText().substring(1)}`,$.getChoices(),$.getCallback);this.addEvent("draw",(J)=>{this.exec(J)}),this.removeEvent("play")}}class b extends X{constructor($,J){super("(event stuff)",[],(K,Q)=>{for(let V of $)K.owner.addEvent(V,J)});this.sai({affectsSelf:$.length,addEvents:$.length})}}class K1 extends X{constructor($){super("You win.",[],(J,K)=>{J.owner.setCanWin(!0,$)});this.sai({winProgress:100})}}class u extends X{constructor($,J){super("(prop set)",[],(K,Q)=>{K.owner.setProp($,J,K)});this.sai({affectsSelf:1})}}class Q1 extends X{constructor($){super("Recover {formula} cards",(J)=>{return new Array($).fill({choice:L.CARD_IN_DISCARD,pointer:O.CARD_IN_DISCARD_MOST_POWER,distinct:!0})},(J,K)=>{while(K.length>0){if(J.deck.discardPile.length==0)break;K.pop().move(N.HAND,J)}});this.setCanPlay((J)=>{if(!J.deck)return!1;return J.deck.discardPile.length>=$}),this.sai({drawsCards:$}),this.setFormula(`${$}`)}}class F1 extends X{constructor(){super("Shuffle the discard pile into the deck",[],($,J)=>{$.deck.reshuffle()})}}class f extends X{constructor($){super(`Play only if you have ${$}`,[],(J)=>{});this.setCanPlay((J)=>{return J.owner.getProp($)}),this.sai({},{pgp:[$]})}}class d extends X{constructor($){super(`Play only if you don't have ${$}`,[],(J)=>{});this.sai({},{pbp:[$]}),this.setCanPlay((J)=>{return!J.owner.getProp($)})}}class V1 extends X{constructor($,J){super("(event stuff)",[],(K,Q)=>{for(let V of[K.owner,...K.opps])for(let F of $)V.addEvent(F,J)});this.sai({addEvents:$.length,affectsSelf:$.length,affectsOpponents:(K)=>K.opps.length*$.length})}}class H1 extends X{constructor($,J){super("(prop set)",[],(K,Q)=>{[K.owner,...K.opps].forEach((V)=>V.setProp($,J,K))});this.sai({affectsSelf:1,affectsOpponents:1},{pbp:[$]})}}class t extends X{constructor($,J){super(`${$}`,[],(K)=>{});this.setCanPlay((K)=>{return J(K)})}}class j1 extends X{constructor($){super(`${$}`,[],(J)=>{});this.sai({meme:10})}}class E extends X{constructor($,J=!0){super(`Unlock ${$.getName()} for purchase${J?". Play only if you haven't unlocked it yet.":"."}`,[],(K)=>{if(K.owner.upgrades().filter((Q)=>Q.getName()===$.getName()).length==0)K.owner.addUpgrade($)});if(J)this.setCanPlay((K)=>{return K.owner.upgrades().filter((Q)=>Q.getName()===$.getName()).length==0});this.sai({changesGame:1,affectsSelf:1,unlockUpgrades:(K)=>{return K.owner.upgrades().filter((Q)=>Q.getName()===$.getName()).length==0?1:0}})}}class _{data;effect;infinite=!1;scale=1.1;level=0;constructor($,J,K=!1,Q=1.1){this.data=JSON.parse(JSON.stringify($)),this.effect=J,this.infinite=K,this.scale=Q}lvl(){return this.level}getCost(){return this.data.cost}getData($){return{name:this.getName(),description:this.getDescription(),cost:this.getCost(),locked:this.data.locked||!this.canPayCost($)}}getName(){return`${this.data.name}${this.infinite&&this.level>0?` Lvl. ${this.level}`:""}`}getDescription(){let $=this.data.description;$=$.replace("{level}",this.level+"");let J=$.match(/{[^}]*}/g);if(J)for(let K of J){let Q=K.substring(1,K.length-1);$=$.replace(K,(0, eval)(Q))}return $}canPayCost($){let J=$.owner.getResources();for(let K of this.data.cost){if(K.resource=="turns")continue;if(!J[K.resource])return!1;if(J[K.resource]<K.amt)return!1}return!0}payCost($){let J=$.owner.getResources();for(let K of this.data.cost)if(K.resource==="turns"){$.owner.addTurns(K.amt);continue}else $.owner.setProp(`res_${K.resource}`,J[K.resource]-K.amt,$)}locked(){return this.data.locked}unlock($){if(!this.data.locked)if(this.payCost($),this.effect($,this),this.level++,!this.infinite)this.data.locked=!0;else for(let J of this.data.cost)J.amt=Math.ceil(J.amt*this.scale)}}class M1 extends X{constructor($){super("Add {formula} turns to opponent.",[{choice:L.OPPONENT,pointer:O.OPPONENT_LEAST_TURNS_REMAINING}],(J,K)=>{K[0].addTurns($+J.card?.pow())});this.setFormula(`{pow} + ${$}`),this.sai({oppWinSetback:$,affectsOpponents:(J)=>$/J.opps.length,winProgress:(J)=>$/J.opps.length/2})}}class e extends X{constructor(){super("You become innoculated with propaganda. You're an antivaxxer now.",[],($,J)=>{$.owner.setProp("antivaxxer",!0)});this.sai({meme:100,changesGame:1,affectsSelf:($)=>$.owner.getProp("antivaxxer")?0:-10},{pbp:["antivaxxer","zombie","res_life"]})}}var U1={radioactivity_deck:[new Y("Nuclear Observation",[new b(["draw"],($)=>{if($.card.getProp("radioactive"))$.owner.setProp("knowledge",($.owner.getProp("knowledge")??0)+5,$),$.owner.draw($.deck,1)}).setText("When you draw a radioactive card, gain {formula} knowledge and draw another card.").setFormula("{pow} + 5").sai({drawsCards:1,affectsSelf:1,collectResource:1})]).setRarity(H.LEGENDARY),new Y("Decay",[new l(new x(1)),new x(1)]).setRarity(H.BASIC).setProp("radioactive",!0),new Y("Fusion",[new l(new X("If you have other cards in your hand, combine {formula} of them at random",[],($,J)=>{let K=$.owner.cih();if(K.length>2){let Q=K.splice(Math.floor(Math.random()*K.length),1)[0],V=K.splice(Math.floor(Math.random()*K.length),1)[0];Y.combine(Q,V).move(N.HAND,$)}})),new x(1)]).setRarity(H.UNCOMMON).setProp("radioactive",!0),new Y("Fission",[new l(new b(["temp_draw"],($)=>{$.card.explode($).sort((Q,V)=>Math.random()-0.5).forEach((Q,V)=>{if(V==0)Q.move(N.HAND,$);else Q.move(N.DISCARD,$)})}).setText("The next card you draw explodes. Keep one fragment at random, and discard the rest.")),new x(1)]).setRarity(H.RARE).setProp("radioactive",!0)],genetics_deck:[new Y("Gene Bank",[new U("metal",20),new f("genetics"),new d("gene_bank"),new u("gene_bank",!0).sai({unlockUpgrades:1,winProgress:1,changesGame:1})]).setRarity(H.RARE).setProp("construction",!0),new Y("Analyze Card DNA",[new f("genetics"),new f("gene_bank"),new I(5,"knowledge"),new X("Analyze a card in the discard pile to add its DNA to the gene bank.",[{choice:L.CARD_IN_DISCARD,pointer:O.CARD_IN_DISCARD_RANDOM}],($,J)=>{if(!$.owner.getProp("dna_research"))$.owner.setProp("dna_research",[],$);let K=J[0];for(let Q of K.getAbilities())$.owner.getProp("dna_research").push(Q);$.deck.discardPile=$.deck.discardPile.filter((Q)=>Q!==K)}).sai({affectsSelf:1,unlockUpgrades:1,changesGame:1})]).setRarity(H.UNCOMMON),new Y("Spank Bank Variety",[new t("if you have {formula} or more entries in your gene bank",($)=>{return($.owner.getProp("dna_research")??[]).length>=30-$.card.pow()}).setFormula("30 - {pow}"),new X("If you have {formula} or more entries in your gene bank, you win the game on your next turn.",[],($,J)=>{$.owner.setCanWin(!0,"Genetic Superiority")}).setFormula("30 - {pow}")]).setRarity(H.LEGENDARY)],explosives_deck:[new Y("Grenade",[new f("explosives"),new X("Explode a card at random in an opponents hand, then they discard half that many cards at random.",[{choice:L.OPPONENT,pointer:O.OPPONENT_LEAST_CARDS}],($,J)=>{let K=J[0],Q=K.cih()[Math.floor(Math.random()*K.cih().length)];if(Q){K.setCiH(K.cih().filter((W)=>W!==Q));let V=Q.explode({owner:K,opps:[...$.opps,$.owner].filter((W)=>W!==K),deck:$.deck,card:Q}),F=Math.ceil(V.length/2);V.forEach((W,z)=>{W.move(N.HAND,$,{to:K})});for(let W=0;W<F;W++)K.discardChoose($)}}).sai({affectsOpponents:2,oppWinSetback:1,changesGame:1})]),new Y("Dynamite",[new f("explosives"),new X("Explode all cards in the discard pile",[],($,J)=>{let K=$.deck.discardPile;$.deck.discardPile=[];for(let Q of K)Q.explode($).forEach((F,W)=>{F.move(N.DISCARD,$)})}).sai({changesGame:1,addCardsToDeck:1}),new X("Destroy half the cards in the discard pile at random",[],($,J)=>{let K=$.deck.discardPile;$.deck.discardPile=[];let Q=Math.ceil(K.length/2);for(let V=0;V<Q;V++)$.deck.discardPile.push(K.splice(Math.floor(Math.random()*K.length),1)[0])}).sai({changesGame:1}),new Q1(1)]).setRarity(H.RARE),new Y("Nuclear Bomb",[new f("explosives"),new X("Kill everyone. They discard their hands",[],($,J)=>{let K=[...$.opps,$.owner];for(let Q of K)Q.setProp("res_life",0,$),$.deck.discardPile.concat(Q.cih()),Q.setCiH([])}).sai({oppWinSetback:1,discardsOpponentCards:1,discardsCards:1}),new X("Kill everyone's citizens.",[],($,J)=>{let K=[...$.opps,$.owner];for(let Q of K)Q.setProp("population",0,$)}).sai({oppWinSetback:1,affectsOpponents:1,affectsSelf:1}),new X("Explode all cards in the discard pile",[],($,J)=>{let K=$.deck.discardPile;$.deck.discardPile=[];for(let Q of K)Q.explode($).forEach((F,W)=>{F.move(N.DISCARD,$)})}).sai({changesGame:1,addCardsToDeck:1}),new F1,new D("radioactivity_deck",30,!0)]).setRarity(H.HAXOR)],academia_deck:[new Y("The Scientific Process",[new U("knowledge",5),new E(new _({name:"Rapid Iteration",description:"When you draw a card, if you have more cards than your maximum hand size, randomly combine cards.",cost:[{amt:25,resource:"knowledge"}]},($)=>{$.owner.addEvent("draw",(J)=>{if(J.owner.cih().length>J.owner.getHandsize()&&J.owner.cih().length>=2)while(J.owner.cih().length>J.owner.getHandsize()&&J.owner.cih().length>=2){let K=J.owner.cih().sort(()=>Math.random()-0.5).slice(0,2),Q=Y.combine(...K);K.forEach((V)=>V.remove(J)),Q.setProp("hybrid",!0),Q.move(N.HAND,J)}})}))]).setRarity(H.RARE),new Y("Thought that Counts",[new I(1,"knowledge")]).setRarity(H.BASIC),new Y("Receive Public Education",[new I(1,"knowledge"),new q(1),new x(1)]).setRarity(H.COMMON),new Y("Homeschooling",[new I(5,"knowledge"),new e]).setRarity(H.RARE),new Y("Go to University",[new U("tadbucks",10),new I(5,"knowledge"),new q(1)]).setRarity(H.UNCOMMON),new Y("Pseudo-Education",[new I(2,"knowledge"),new e,new D("alchemy_deck",75,!0).setText("Invent alchemy and witchcraft. Add them to the game.")]),new Y("Research: Explosives",[new U("knowledge",15),new u("explosives",!0).setCanPlay(($)=>{return!$.owner.getProp("explosives")}).setText("Discover explosives if you haven't already."),new D("explosives_deck",35,!0).setText("Invent explosives. Add them to the game.")]).setProp("research",!0),new Y("Research: Genetics",[new U("knowledge",20),new u("genetics",!0).setCanPlay(($)=>{return!$.owner.getProp("genetics")}).setText("Discover genetics if you haven't already."),new D("genetics_deck",35,!0).setText("Invent genetics. You learn cards are sentient. Add it to the game.")])],basic_resource_deck:[new Y("Wood Shipment",[new E(new _({name:"Wood Shipment",description:"Order {Math.floor(10 * Math.pow(1.15, {level} + 1)} wood from the Amazon",cost:[{amt:20,resource:"tadbucks"}],locked:!1},($,J)=>{$.owner.addResource("wood",Math.floor(10*Math.pow(1.15,J.lvl())))},!0,1.25))]),new Y("Food Shipment",[new E(new _({name:"Wood Shipment",description:"Order {Math.floor(10 * Math.pow(1.15, {level} + 1)} food from the Amazon",cost:[{amt:20,resource:"tadbucks"}],locked:!1},($,J)=>{$.owner.addResource("food",Math.floor(10*Math.pow(1.15,J.lvl())))},!0,1.25))]),new Y("Metal Shipment",[new E(new _({name:"Wood Shipment",description:"Order {Math.floor(10 * Math.pow(1.15, {level} + 1)} metal from the Amazon",cost:[{amt:20,resource:"tadbucks"}],locked:!1},($,J)=>{$.owner.addResource("metal",Math.floor(10*Math.pow(1.15,J.lvl())))},!0,1.25))]),new Y("Stone Shipment",[new E(new _({name:"Wood Shipment",description:"Order {Math.floor(10 * Math.pow(1.15, {level} + 1)} stone from the Amazon",cost:[{amt:20,resource:"tadbucks"}],locked:!1},($,J)=>{$.owner.addResource("stone",Math.floor(10*Math.pow(1.15,J.lvl())))},!0,1.25))]),new Y("Gather Wood",[new I(0,"wood")]).setRarity(H.BASIC).setProp("resource",!0),new Y("Gather Stone",[new I(0,"stone")]).setRarity(H.BASIC).setProp("resource",!0),new Y("Gather Metal",[new I(0,"metal")]).setRarity(H.BASIC).setProp("resource",!0),new Y("Gather Food",[new I(0,"food")]).setRarity(H.BASIC).setProp("resource",!0),new Y("Collect Taxes",[new X("Gain {formula} Tadbucks for each citizen you have.",[],($,J)=>{$.owner.setProp("tadbucks",($.owner.getProp("tadbucks")??0)+$.owner.getProp("population")*($.card.pow()*10),$)}).setFormula("{pow} * 10")]).setRarity(H.UNCOMMON),new Y("Construct Cottage",[new U("wood",5),new U("food",5),new X("Build a cottage. (Adds {formula} housing)",[],($,J)=>{$.owner.setProp("housing",$.card.pow()+($.owner.getProp("housing")??0),$)}),new b(["turn_start"],($)=>{if($.owner.getProp("housing")>$.owner.getProp("population"))$.owner.setProp("population",($.owner.getProp("population")??0)+1,$)}).setText("At the start of your turn, if you have housing, people move in.")]).setRarity(H.COMMON).setProp("construction",!0),new Y("Marketplace Construction",[new d("marketplace"),new U("wood",5),new U("stone",5),new u("marketplace",!0).setText("Unlocks the marketplace"),new X("Get a stimmy check of {formula} tadbucks",[],($,J)=>{$.owner.setProp("tadbucks",($.owner.getProp("tadbucks")??0)+$.card.pow()*10,$)}).setFormula("100 + (10 * {pow})")]).setRarity(H.MYTHIC).setProp("construction",!0),new Y("Research: Improved Agricultural Practices",[new U("knowledge",8),new X("Increase the power of all cards that produce food by {formula}",[],($,J)=>{let K=[...$.opps,$.owner];for(let Q of K)for(let V of Q.cih())if(V.getProp("produce")&&V.getProp("produce").includes("food"))V.setPow(V.pow()+$.card.pow());for(let Q of $.deck.discardPile)if(Q.getProp("produce")&&Q.getProp("produce").includes("food"))Q.setPow(Q.pow()+$.card.pow());for(let Q of $.deck.asArray())if(Q.getProp("produce")&&Q.getProp("produce").includes("food"))Q.setPow(Q.pow()+$.card.pow())})]).setRarity(H.RARE).setProp("research",!0),new Y("Research: Improved Logging Practices",[new U("knowledge",8),new X("Increase the power of all cards that produce wood by {formula}",[],($,J)=>{let K=[...$.opps,$.owner];for(let Q of K)for(let V of Q.cih())if(V.getProp("produce")&&V.getProp("produce").includes("wood"))V.setPow(V.pow()+$.card.pow());for(let Q of $.deck.discardPile)if(Q.getProp("produce")&&Q.getProp("produce").includes("wood"))Q.setPow(Q.pow()+$.card.pow());for(let Q of $.deck.asArray())if(Q.getProp("produce")&&Q.getProp("produce").includes("wood"))Q.setPow(Q.pow()+$.card.pow())})]).setRarity(H.RARE).setProp("research",!0),new Y("Research: Improved Quarrying Practices",[new U("knowledge",8),new X("Increase the power of all cards that produce stone by {formula}",[],($,J)=>{let K=[...$.opps,$.owner];for(let Q of K)for(let V of Q.cih())if(V.getProp("produce")&&V.getProp("produce").includes("stone"))V.setPow(V.pow()+$.card.pow());for(let Q of $.deck.discardPile)if(Q.getProp("produce")&&Q.getProp("produce").includes("stone"))Q.setPow(Q.pow()+$.card.pow());for(let Q of $.deck.asArray())if(Q.getProp("produce")&&Q.getProp("produce").includes("stone"))Q.setPow(Q.pow()+$.card.pow())})]).setRarity(H.RARE).setProp("research",!0),new Y("Research: Improved Mining Practices",[new U("knowledge",8),new X("Increase the power of all cards that produce metal by {formula}",[],($,J)=>{let K=[...$.opps,$.owner];for(let Q of K)for(let V of Q.cih())if(V.getProp("produce")&&V.getProp("produce").includes("metal"))V.setPow(V.pow()+$.card.pow());for(let Q of $.deck.discardPile)if(Q.getProp("produce")&&Q.getProp("produce").includes("metal"))Q.setPow(Q.pow()+$.card.pow());for(let Q of $.deck.asArray())if(Q.getProp("produce")&&Q.getProp("produce").includes("metal"))Q.setPow(Q.pow()+$.card.pow())})]).setRarity(H.RARE).setProp("research",!0)],zombie_deck:[new Y("Chomp",[new p,new X("Deal {formula} damage to an opponent. They discard that many cards.",[{pointer:O.OPPONENT_MOST_CARDS,choice:L.OPPONENT}],($,J)=>{let K=J[0],Q=$.card.pow()*5;if($.owner.getProp("res_life")<=0){K.setProp("res_life",K.getProp("res_life")-Q,$);for(let V=0;V<Q;V++)K.discardChoose($)}}).setFormula("{pow} * 5")]).setRarity(H.COMMON),new Y("Brain Munchies",[new p,new X("Draw {formula} cards.",[],($,J)=>{if($.owner.getProp("res_life")<=0)$.owner.draw($.deck,$.card.pow())}).setFormula("{pow} + 2")]).setRarity(H.COMMON),new Y("X-49 Antigen",[new X("Play only if you aren't an antivaxxer.",[],($,J)=>{}).setCanPlay(($)=>{return!$.owner.getProp("antivaxxer")}),new X("Heal all zombies. They give you their hands out of gratitude.",[],($,J)=>{if(!$.owner.getProp("antivaxxer"))for(let K of $.opps)K.setProp("res_life",10,$),$.owner.setCiH($.owner.cih().concat(K.cih())),K.setCiH([])})]).setCanPlay(($)=>{return!$.owner.getProp("antivaxxer")}).setRarity(H.RARE),new Y("Necromutation",[new p,new J1,new $1(2)]).setRarity(H.RARE),new Y("Rot Brains",[new p,new X("Zombify half the cards in an opponents hand. (They can't play them unless they are a zombie)",[{choice:L.OPPONENT,pointer:O.OPPONENT_MOST_CARDS}],($,J)=>{let K=J[0],Q=K.cih(),V=Math.ceil(Q.length/2),F=Q.map((W,z)=>W.clone()).sort(()=>Math.random()-0.5);for(let W=0;W<V;W++)F[W]=new Y(`Zombified ${F[W].getName()}`,[new p,...F[W].getAbilities()]).setPow(F[W].pow()).setRarity(F[W].getRarity()).setProps({zombie:!0,...F[W].getProps()}).setZone(N.HAND);K.setCiH(F)})])],alchemy_deck:[new Y("Harvest Snowthistle",[new E(new _({name:"Forage Snowthistle",description:"Forage snowthistle.",cost:[{amt:1,resource:"turns"}],locked:!1},($)=>{$.owner.addResource("snowroot",1)},!0,1.1),!1)]).setRarity(H.BASIC)],gambling_deck:[new Y("Lady Fortune's Favor",[new f("dice"),new U("tadbucks",20),new x(1),new X("Roll your dice. If you get a {formula} or more, you win the game.",[],($,J)=>{if($.owner.rollDice()>=100-$.card.pow())$.owner.setCanWin(!0,"had Lady Fortune's favor")}).setFormula("100 - {pow}")]).setRarity(H.MYTHIC),new Y("Street Modding",[new f("dice"),new U("tadbucks",15),new X("Add {formula} pips at random to your dice.",[],($,J)=>{let K=3+$.card.pow(),Q=[...$.owner.getProp("dice")??[-1]];for(let V=0;V<K;V++)Q[Math.floor(Math.random()*Q.length)]++;$.owner.setProp("dice",Q,$)}).setFormula("3 + {pow}")]).setRarity(H.UNCOMMON),new Y("Government Grade Fortunator",[new f("dice"),new U("tadbucks",100),new X("Add {formula} pips at random to your dice.",[],($,J)=>{let K=10+$.card.pow(),Q=[...$.owner.getProp("dice")??[-1]];for(let V=0;V<K;V++)Q[Math.floor(Math.random()*Q.length)]++;$.owner.setProp("dice",Q,$)}).setFormula("10 + {pow}")]).setRarity(H.RARE),new Y("Dimensionality Tear",[new f("explosives"),new f("dice"),new U("tadbucks",20),new U("knowledge",10),new X("Add 2 sides to your dice, each with pips equal to the total of the rest of the sides of the dice.",[],($,J)=>{let K=$.owner.getProp("dice").reduce((Q,V)=>Q+V,0);$.owner.setProp("dice",$.owner.getProp("dice").concat([K,K]),$)})]).setRarity(H.MYTHIC),new Y("Gambling Insurance",[new f("casino"),new U("tadbucks",50),new b(["gamble_lose"],($)=>{$.owner.setProp("tadbucks",($.owner.getProp("tadbucks")??0)+$.card.pow()*10,$)}).setText("Whenever you lose at gambling, you gain {formula} Tadbucks.").setFormula("{pow} * 10")]).setRarity(H.LEGENDARY)],currency_deck:[new Y("Telemarketing",[new U("tadbucks",50),new E(new _({name:"Telemarketing",description:"Outsource cold-calling all your opponents, wasting their time.",cost:[{amt:15,resource:"tadbucks"}]},($)=>{$.opps.forEach((J)=>{J.addTurns(2)})},!0,1.35)).setText("Unlocks telemarketing as a way to waste your opponents time.")]).setRarity(H.RARE),new Y("Welfare Handouts",[new X("Cards in your hand lose all costs",[],($,J)=>{let K=$.owner.cih();for(let Q=0;Q<K.length;Q++)K[Q]=new Y(K[Q].getName(),[...K[Q].getAbilities().map((V)=>{return V.clone()}).filter((V)=>{return!V.isCostAbility()})]).setPow(K[Q].pow()).setRarity(K[Q].getRarity()).setProps(K[Q].getProps())})]).setRarity(H.LEGENDARY),new Y("Moneybags $$$",[new U("tadbucks",2000),new K1("achieving wealth")]).setRarity(H.LEGENDARY),new Y("Communism",[new X("Collect all cards from all hands, shuffle them together, then distribute them evenly to all players",[],($,J)=>{let K=[];for(let V of[$.owner,...$.opps])while(V.inHand()>0)K.push(V.cih().pop());K=K.sort(()=>Math.random()-0.5);let Q=0;while(K.length>0)[$.owner,...$.opps][Q%[$.owner,...$.opps].length].cih().push(K.pop()),Q++})]).setRarity(H.MYTHIC),new Y("The House Always Wins",[new U("tadbucks",25),new d("casino"),new u("casino",!0).setText("Unlocks membership to the casino."),new u("dice",[1,2,3,4,5,6]).setText("Unlocks a basic 6-sided dice"),new D("gambling_deck",50,!0).setText("Invent gambling. Add it to the game.")]).setRarity(H.MYTHIC),new Y("Payday",[new X("Get paid. Earn {formula} Tadbucks.",[],($)=>{$.owner.setProp("res_tadbucks",($.owner.getProp("res_tadbucks")??0)+15*$.card.pow(),$)}).setFormula("15 * {pow}")]).setRarity(H.BASIC),new Y("Bonus Check",[new X("Get paid. Earn {formula} Tadbucks.",[],($)=>{$.owner.setProp("res_tadbucks",($.owner.getProp("res_tadbucks")??0)+25*$.card.pow(),$)}).setFormula("25 * {pow}")]).setRarity(H.COMMON),new Y("Corporate Sabotage",[new U("tadbucks",20),new g(3)]).setRarity(H.RARE),new Y("Inflationary Hedging",[new U("tadbucks",35),new X("Increase the power of all cards in your hand and the deck that mention Tadbucks by {formula}",[],($,J)=>{for(let K of $.owner.cih()){if(!K)continue;if(K===$.card)continue;if(K.getText().toLowerCase().includes("tadbuck")||K.getName().toLowerCase().includes("tadbuck"))K.setPow(K.pow()+$.card.pow())}for(let K of $.deck.asArray()){if(!K)continue;if(K.getText().toLowerCase().includes("tadbuck")||K.getName().toLowerCase().includes("tadbuck"))K.setPow(K.pow()+$.card.pow())}})]).setRarity(H.RARE),new Y("Marketplace Economics",[new U("tadbucks",50),new D("basic_resource_deck",75,!1).setText("Invent market economics. Add basic resources to the game.")])],life_deck:[new Y("Job Interview",[new E(new _({name:"Get a Job",description:"Search for a job in Alaska.",cost:[{amt:3,resource:"turns"}],locked:!1},($)=>{$.owner.addUpgrade(new _({name:"Work",description:"Work for 65 Tadbucks.",cost:[{amt:1,resource:"turns"}]},(K)=>{K.owner.addResource("tadbucks",65)},!0,1.5))}))]).setRarity(H.UNCOMMON),new Y("Phlebotomy",[new E(new _({name:"Blood Drawing",description:"Take some time to do research on your blood. You get paid for it!",cost:[{amt:1,resource:"turns"},{amt:3,resource:"life"}]},($)=>{$.owner.addResource("tadbucks",5),$.owner.addResource("knowledge",5)},!0,1.2))]).setRarity(H.UNCOMMON),new Y("Crusader Kings III Level of Immortality",[new U("life",2500),new K1("achieving immortality")]).setRarity(H.MYTHIC),new Y("Going to the Gym",[new X("Gain {formula} life",[],($,J)=>{$.owner.setProp("res_life",$.owner.getProp("res_life")+5*$.card.pow(),$)}).setFormula("5 * {pow}")]).setRarity(H.COMMON),new Y("Assassinate",[new X("Kill an opponent. They discard their hand.",[{pointer:O.OPPONENT_MOST_CARDS,choice:L.OPPONENT}],($,J)=>{let K=J[0];K.setProp("res_life",0,$);while(K.inHand()>0)K.discard(K.cih()[0],$.deck)})]).setRarity(H.HAXOR),new Y("Soul Cancer",[new X("Whenever you play a card, lose {formula} life",[],($,J)=>{$.owner.addEvent("play",(K)=>{if(!K.owner.getProp("res_life"))K.owner.setProp("res_life",K.card.pow(),K);K.owner.setProp("res_life",K.owner.getProp("res_life")-K.card.pow(),K)})})]).setRarity(H.RARE),new Y("2024 Presidential Debate",[new e,new q(1)]).setRarity(H.UNCOMMON)],point_deck:[new Y("Point of Pity",[new X("If you have -{formula} or fewer points, you win the game on your next turn",[],($,J)=>{if($.owner.getProp("points")<=-(100-$.card.pow()))$.owner.setCanWin(!0,"had a point of pity")}).setFormula("100 - {pow}")]).setRarity(H.RARE),new Y("Pointlessify",[new X("Reduce all point values in an opponents hand to -1. Gain points equal to the difference.",[{pointer:O.OPPONENT_MOST_CARDS,choice:L.OPPONENT}],($,J)=>{let K=J[0],Q=0;for(let V of K.cih())if(V.getProp("point_value")){if(V.getProp("point_value")>-1)Q+=V.getProp("point_value")+1;V.setProp("point_value",-1)}$.owner.setProp("points",($.owner.getProp("points")??0)+Q,$)})]).setRarity(H.RARE),new Y("Pontificate",[new X("Gain {formula} points.",[],($,J)=>{$.owner.setProp("points",$.owner.getProp("points")+$.card.pow(),$)}),new X("Randomly add points to all cards in the deck",[],($,J)=>{for(let K of $.deck)if(K.getProp("point_value"))K.setProp("point_value",K.getProp("point_value")+Math.floor(Math.random()*K.pow()));else K.setProp("point_value",[-K.pow(),0,0,1,1,K.pow()].sort((Q,V)=>Math.random()-0.5)[0])})]).setRarity(H.BASIC)],faith_deck:[new Y("Thoughts and Prayers",[new I(1,"faith"),new q(1),new X("Slow your roll. You pray instead of getting closer to winning",[],($,J)=>$.owner.addTurns(1))]).setRarity(H.BASIC)],romance:[],poop_deck:[new Y("Pile o' Crap",[new j1("\uD83D\uDCA9")]).setRarity(H.BASIC).setProp("crap",!0)],basic:[new Y("Just Do Better",[new D("romance",75,!0).setText("Invent romance. Add it to the game."),new I(5,"love")]).setRarity(H.RARE),new Y("Oozify",[new X("Choose a card in your hand. Split it into {formula} weaker cards.",[{pointer:O.CARD_IN_HAND_MOST_POWER,choice:L.CARD_IN_HAND}],($,J)=>{let K=J[0],Q=[];for(let V=0;V<$.card.pow()+1;V++){let F=K.clone().setPow(Math.floor(1/$.card.pow()*K.pow()));F.setName(`Oozing ${F.getName()}`),F.setRarity(Math.max(0,F.getRarity()-1)),Q.push(F)}K.remove($),Q.forEach((V)=>{V.move(N.HAND,c)})}).setCanPlay(($)=>{return $.owner.cih().length>1}).setFormula("{pow} + 1")]).setRarity(H.RARE),new Y("You Could Make a Religion Outta This",[new D("faith_deck",75,!0).setText("Invent religion."),new I(1,"faith"),new n]).setRarity(H.RARE),new Y("What's the Point?",[new D("point_deck",75,!0).setText("Invent points. Add points to the game."),new H1("points_to_win",100).setText("First player to 100 points wins on their next turn!"),new V1(["play"],($)=>{if($.card.getProp("point_value")){let J=$.card.getProp("point_value")??0;J*=0.75+$.card.pow()*0.25,$.owner.setProp("points",($.owner.getProp("points")??0)+J,$)}}).setText("Whenever someone plays a card, they get however many points that card is worth."),new V1(["points_change"],($)=>{if($.owner.getProp("points")>=$.owner.getProp("points_to_win"))$.owner.setCanWin(!0,"saw the point")}).setText("Every time someone's score changes, check if they can win."),new X("For each card in the deck, assign a random point value!",[],($,J)=>{let K=[-7,-5,-3,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,0,1,1,1,1,1,1,2,2,3,3,5,10];for(let Q of $.deck.asArray())Q.setProp("point_value",K[Math.floor(Math.random()*K.length)])}),new n]).setRarity(H.LEGENDARY),new Y("Agonize over a Decision",[new q(3),new x(3)]).setRarity(H.UNCOMMON),new Y("Skip Bitch",[new X("Skip an opponents turn",[{pointer:O.OPPONENT_MOST_CARDS,choice:L.OPPONENT}],($,J)=>{J[0].skip()})]).setRarity(H.UNCOMMON),new Y("Megaskip Bitch",[new X("Skip an opponents next {formula} turns",[{pointer:O.OPPONENT_MOST_CARDS,choice:L.OPPONENT}],($,J)=>{let K=J[0];K.skip(),K.skip()}).setFormula("1 + {pow}")]).setRarity(H.HAXOR),new Y("Housing Economy Crash",[new X("Each player discards all cards above common rarity",[],($,J)=>{let K=[$.owner,...$.opps];for(let Q of K){let V=Q.cih().filter((F)=>{if(!F)return!1;return F.getRarity()>H.COMMON});for(let F of V)Q.discard(F,$.deck)}})]).setRarity(H.RARE),new Y("Tactical Cuckage",[new g(2),new x(3),new X("Make an opponent skip a turn",[{pointer:O.OPPONENT_MOST_CARDS,choice:L.OPPONENT}],($,J)=>{J[0].skip()}),new q(1)]).setRarity(H.MYTHIC),new Y("\u26A1\u26A1 Supercharge \u26A1\u26A1",[new $1(0),new X("\u26A1\u26A1",[],($,J)=>{let K=J[0];K.setName(`Empowered ${K.getName()}`)}).setFormula("{pow}")]).setRarity(H.UNCOMMON),new Y("Gifts of Giving",[new q(1),new X1(1)]).setRarity(H.COMMON),new Y("Minor Cucking",[new g(1)]).setRarity(H.COMMON),new Y("Gifted Sabotage",[new x(2)]).setRarity(H.COMMON),new Y("Basic Bitchery",[new q(1)]).setRarity(H.BASIC),new Y("Change of Perspective",[new Y1(2)]).setRarity(H.RARE),new Y("Speedbump",[new X("Increase everyone else's cards to play by {formula}",[],($,J)=>{$.opps.forEach((K)=>{K.addTurns($.card.pow())})})]).setRarity(H.BASIC),new Y("Encrust in Gold",[new X("Increase a card in your hands rarity. It gains {formula} power",[{choice:L.CARD_IN_HAND,pointer:O.CARD_IN_HAND_LEAST_POWER}],($,J)=>{let K=J[0];K.setRarity(K.getRarity()+1),K.setPow(K.pow()+$.card.pow()+2),K.setName(`Golden ${K.getName()} \uD83D\uDCB0\uD83D\uDCB0`)}).setFormula("{pow} + 2")]).setRarity(H.RARE),new Y("Scrap Buyback",[new Q1(1).setFormula("{pow}")]).setRarity(H.UNCOMMON),new Y("Rough Breakup",[new J1,new X("Reduce the power of cards in your hand by {formula}",[],($,J)=>{$.owner.cih().forEach((K)=>{K.setPow(K.pow()-$.card.pow())})}).setFormula("{pow}")]),new Y("Mutual Cuckage",[new X("Increase everyone's cards to play to win by {formula}",[],($,J)=>{[$.owner,...$.opps].forEach((K)=>{K.addTurns(10+$.card.pow())})}).setFormula("10 + {pow}")]).setRarity(H.RARE),new Y("Even the Playing Field",[new t("Play only if you aren't the first player",($)=>{return $.owner.getTurnPlacement()>0}),new X("Decrease your cards to play to win by {formula}",[],($,J)=>{$.owner.addTurns(-(3+$.card.pow()))}).setFormula("3 + {pow}")]).setRarity(H.UNCOMMON),new Y("Denial",[new X("Increase an opponent's cards to play to win by {formula}",[{choice:L.OPPONENT,pointer:O.OPPONENT_LEAST_TURNS_REMAINING}],($,J)=>{J[0].addTurns($.card.pow()*2)}).setFormula("{pow} * 2")]).setRarity(H.COMMON),new Y("Get a Life",[new I(10,"life"),new D("life_deck",50,!0)]).setRarity(H.RARE),new Y("Proletariat Revolution",[new t("Play only if you're the first player",($)=>{return $.owner.getTurnPlacement()===0}),new X("Draw {formula} cards.",[],($,J)=>{if($.owner.getTurnPlacement()===0)$.owner.draw($.deck,$.card.pow()+2)}).setFormula("{pow} + 2")]).setRarity(H.COMMON),new Y("Beanz It",[new X('Add "Add {formula} turns to an opponent" to a card in your hand.',[{choice:L.CARD_IN_HAND,pointer:O.CARD_IN_HAND_RANDOM}],($,J)=>{let K=J[0];K.setName(`Bean-Fueled ${K.getName()} \uD83E\uDED8`),K.addAbility(new M1($.card.pow()-K.pow()))}).setFormula("{pow}")]).setRarity(H.COMMON),new Y("Community Service Project",[new X('Add "Draw {formula} card" to a card in your hand.',[{choice:L.CARD_IN_HAND,pointer:O.CARD_IN_HAND_RANDOM}],($,J)=>{let K=J[0];K.setName(`Wizened ${K.getName()}`),K.addAbility(new q($.card?.pow()-K.pow()))}).setFormula("{pow}")]).setRarity(H.COMMON),new Y("Academia",[new D("academia_deck",100,!0).setText("Invent student loans. Add academia to the game."),new n]).setRarity(H.RARE),new Y("Currency",[new D("currency_deck",100,!0,!0).setText("Invent currency. Add currency to the game."),new E(new _({name:"Get a Job",description:"Search for a job in Alaska.",cost:[{amt:3,resource:"turns"}],locked:!1},($)=>{$.owner.addUpgrade(new _({name:"Work",description:"Work for 50 Tadbucks.",cost:[{amt:1,resource:"turns"}]},(K)=>{K.owner.addResource("tadbucks",50)},!0,1.2))})).setText("You also invent the idea of working for pay."),new n]).setRarity(H.RARE)]},w=U1;class o{name;cards=[];skipped=0;props={};events={};turnPlacement=0;turnsRemaining=25;canWin=!1;winReason="cards in hand";handSize=10;bot=!1;host=!1;botProfile=void 0;eventList={};constructor($,J){this.name=Math.random().toString(36).substring(7),this.draw(J,$),this.setProp("meta_upgrade",[]),this.addUpgrade(new _({name:"Take a Crap",description:"Take a bathroom break to draw a card.",cost:[{amt:1,resource:"turns"}],locked:!1},(K)=>{K.owner.draw(K.deck,1),K.deck.addCards(Z.fromCardList(1,w.poop_deck))},!0,1.5)),this.addEvent("draw",(K)=>{if(!K.card)return;if(!this.eventList[K.card.getName()])this.eventList[K.card.getName()]={drawn:0,played:0,discarded:0,given:0,text:""};this.eventList[K.card.getName()].drawn++,this.eventList[K.card.getName()].text=K.card.getText()}),this.addEvent("play",(K)=>{if(!this.eventList[K.card.getName()])this.eventList[K.card.getName()]={drawn:0,played:0,discarded:0,given:0,text:""};this.eventList[K.card.getName()].played++,this.eventList[K.card.getName()].text=K.card.getText(),K.owner.addTurns(-1)}),this.addEvent("discard",(K)=>{if(!K.card)return;if(!this.eventList[K.card.getName()])this.eventList[K.card.getName()]={drawn:0,played:0,discarded:0,given:0,text:""};this.eventList[K.card.getName()].discarded++,this.eventList[K.card.getName()].text=K.card.getText()}),this.addEvent("give",(K)=>{if(!this.eventList[K.card.getName()])this.eventList[K.card.getName()]={drawn:0,played:0,discarded:0,given:0,text:""};this.eventList[K.card.getName()].given++,this.eventList[K.card.getName()].text=K.card.getText()}),this.addEvent("res_life_change",(K)=>{if(this.getProp("res_life")<=0){if(!K.deck)return;if(!K.deck.props.added_zombie_deck)K.deck.addCards(Z.fromCardList(45,w.zombie_deck)),K.deck.shuffle(),K.deck.props.added_zombie_deck=!0}})}addResource($,J){if($.startsWith("res_"))$=$.substring(4);if(!this.getProp(`res_${$}`))this.setProp(`res_${$}`,0);this.setProp(`res_${$}`,this.getProp(`res_${$}`)+J)}upgrades(){return this.props.meta_upgrade||[]}addUpgrade($){if(!this.props.meta_upgrade)this.props.meta_upgrade=[];this.props.meta_upgrade.push($),this.fireEvents("new_upgrade",{owner:this,opps:[],deck:void 0,card:void 0})}setHost($=!0){return this.host=$,this}isHost(){return this.host}getResources(){let $={};for(let J in this.props)if(J.startsWith("res_"))$[J.substring(4)]=this.props[J];return $.turns=Infinity,$}getUIs(){return{marketplace:this.props.marketplace||!1,gene_bank:this.props.gene_bank||!1,casino:this.props.casino||!1,upgrade:!0}}getRelevantProps(){let $={};for(let J in this.props)if(!J.startsWith("meta_"))$[J]=this.props[J];return $}getPrivate($=!1){return{name:this.name,cards:this.cards.length,handsize:this.handSize,skipped:this.skipped,props:this.getRelevantProps(),turnsRemaining:this.turnsRemaining,canWin:this.canWin,winReason:this.winReason,host:this.host,you:$,order:this.turnPlacement}}getCards($,J){return this.cards.map((K)=>({name:K.getName(),text:K.getFormulatedText({owner:this,opps:$,deck:J,card:K}),rarity:K.getRarity(),power:K.pow(),formula:K.getFormulas(),props:K.getProps(),playable:K.canBePlayed({owner:this,opps:$,deck:J,card:K})}))}setBot(){return this.bot=!0,this.botProfile=new m(Object.keys(R)[Math.floor(Math.random()*Object.keys(R).length)]),this}isBot(){return this.bot}setName($){return this.name=$,this}getCardStats(){return this.eventList}setTurnPlacement($){return this.turnPlacement=$,this}getTurnPlacement(){return this.turnPlacement}getHandsize(){return this.handSize}getBotProfile(){return this.botProfile}addHandsize($){return this.handSize+=$,this}setHandsize($){return this.handSize=$,this}propList(){return this.props}on($,J){return this.addEvent($,J),this}addEvent($,J){if(!this.events[$])this.events[$]=[];this.events[$].push(J)}getWinReason(){return this.winReason}fireEvents($,J){if(this.events[$])for(let K of this.events[$])K(J);if(this.events[`temp_${$}`]){for(let K of this.events[`temp_${$}`])K(J);delete this.events[`temp_${$}`]}}addTurns($){if(this.turnsRemaining+=$,this.turnsRemaining<=0)this.setCanWin(!0,"plodded across the finish line");return this}setTurns($){return this.turnsRemaining=$,this}getTurns(){return this.turnsRemaining}rollDice(){if(this.getProp("dice")){let $=this.getProp("dice");return $[Math.floor(Math.random()*$.length)]}return-1}setCanWin($,J="cards in hand"){if(this.canWin=$,this.winReason=J,this.canWin)this.fireEvents("can_win",{owner:this,opps:[],card:void 0,deck:void 0});return this}winCheck(){return this.canWin}setProp($,J,K){if(this.props[$]=J,K)this.fireEvents(`${$}_change`,K);return this}getProps(){return this.props}getProp($){return this.props[$]||0}skip(){this.skipped++}skipCheck(){if(this.skipped>0)return this.skipped--,!0;return!1}toPlayerState(){return{name:this.name,cards:this.cards.length,handsize:this.handSize,skipped:this.skipped,props:this.props,turnsRemaining:this.turnsRemaining,canWin:this.canWin,winReason:this.winReason,host:this.host,you:!1,order:this.turnPlacement}}getLogText(){return`\xA7\xA7${this.bot?`<b>[${this.botProfile.getProfileName()}]</b> `:""}${this.host?"<b>[HOST]</b> ":""}${this.name}\xA7player\xA7${JSON.stringify(this.toPlayerState())}\xA7\xA7`}getName(){return this.name}cih(){return this.cards}setCiH($){return this.cards=$,this}inHand(){return this.cards.length}turnStart($){for(let J of this.cards)J.fireEvents("turn_start",{...$,card:J})}draw($,J=1){let K=$.draw(J);for(let Q of K){if(!Q)continue;if(Q.draw(this,[],$),this.fireEvents("draw",{owner:this,opps:[],deck:$,card:Q}),J>=1)this.cards=this.cards.concat(Q)}}play($,J,K,Q){if(this.cards.splice(this.cards.indexOf($),1),!$.doSkipDiscard())K.discardPile.push($.setZone(N.DISCARD));else $.remove({card:$,deck:K,owner:this,opps:J});$.play(this,J,K,Q),this.fireEvents("play",{owner:this,opps:J,deck:K,card:$})}give($,J){$.give(this,[J],void 0),this.fireEvents("give",{owner:this,opps:[],deck:void 0,card:$}),J.cards.push($),this.cards.splice(this.cards.indexOf($),1)}discard($,J){$.discard(this,[],J),this.fireEvents("discard",{owner:this,opps:[],deck:J,card:$}),J.discardPile.push($.setZone(N.DISCARD)),this.cards.splice(this.cards.indexOf($),1)}discardRandom($){let J=this.cih()[Math.floor(Math.random()*this.cih().length)];if(J)this.discard(J,$.deck)}discardChoose($){let J=this.weightedDiscard($);if(J)this.discard(J,$.deck);else this.discardRandom($)}randomCard(){return this.cards[Math.floor(Math.random()*this.cards.length)]}weightedDiscard($){let J=Infinity,K=null;for(let Q of this.cards)if(Q&&this.isBot()){let V=this.botProfile.evaluate(Q,$);if(V<J*(0.8+Math.random()*0.4))J=V,K=Q}return K}weightedDiscardToHand($){if(this.cih().length>this.getHandsize())while(this.cih().length>this.getHandsize()){let J=this.weightedDiscard($);if(J||!$.deck)this.discard(J,$.deck);else return}}weightedGive($){let J=Infinity,K=null;for(let Q of this.cards)if(Q&&this.isBot()){let V=this.botProfile.evaluate(Q,$);if(V<J*(0.8+Math.random()*0.4))J=V,K=Q}return K}weightedPlay($){let J=(-Infinity),K=null;for(let Q of this.cards)if(Q&&this.botProfile){let V=this.botProfile.evaluate(Q,$);if(V>J*(0.8+Math.random()*0.4)&&Q.canBePlayed($))J=V,K=Q}else console.log("not a bot");return K}getEvent($){return this.events[$]}removeEvent($){return delete this.events[$],this}selectChoices($,J){return[]}evaluate($,J){return 0}}var G;(function(j){j[j["CONNECTED"]=0]="CONNECTED";j[j["DISCONNECTED"]=1]="DISCONNECTED";j[j["SET_NAME"]=2]="SET_NAME";j[j["UPDATE_PLAYER_STATE"]=3]="UPDATE_PLAYER_STATE";j[j["SERVER_MSG"]=4]="SERVER_MSG";j[j["ADD_BOT"]=5]="ADD_BOT";j[j["KICK_PLAYER"]=6]="KICK_PLAYER";j[j["TRANSFER_UPGRADE_SHOP"]=7]="TRANSFER_UPGRADE_SHOP";j[j["BUY_UPGRADE"]=8]="BUY_UPGRADE";j[j["TRANSFER_MARKETPLACE"]=9]="TRANSFER_MARKETPLACE";j[j["DRAW_CARD"]=10]="DRAW_CARD";j[j["PLAY_CARD"]=11]="PLAY_CARD";j[j["GIVE_CARD"]=12]="GIVE_CARD";j[j["DISCARD_TO_HAND"]=13]="DISCARD_TO_HAND";j[j["GET_CHOICES"]=14]="GET_CHOICES";j[j["CHOICE_LIST"]=15]="CHOICE_LIST";j[j["ERROR"]=16]="ERROR"})(G||(G={}));import{WebSocketServer as T1} from"ws";function N1($=100,J=!0){let K=[],Q={},V=0,F=100;for(let W=F;W>0;W--){let z=Z.fromCardList(300,w.basic),M=[];for(let T=0;T<3+F%3;T++)M.push(new o(7,z).setBot());for(let T of Object.values(w))K.push(...T.map((S)=>S.clone()));for(let T of K)for(let S=0;S<M.length;S++){let A={owner:M[S],opps:M.filter((P,W1)=>W1!==S),card:T},i=T.getTraits(A).profile;for(let P in i){if(!Q[P])Q[P]=0;Q[P]+=i[P]}V++}if(J)console.log(`${W} simulation${W>1?"s":""} remaining... (${V} iterations)`)}for(let W in Q)Q[W]/=V,Q[W]=1/Q[W];if(J)console.log(Q);return Q}class s{players={};sockets={};deck;turnPhase=0;activeTurn="";logEntries=[];sendableLogs=[];serverObj=void 0;serverPort=15912;serverConfig={startingHand:4,maxPlayers:6,minPlayers:1,fairness:!0};booted=!1;constructor(){this.deck=Z.fromCardList(60,w.basic),this.deck.shuffle()}reset(){if(this.serverObj)this.serverObj.close();this.deck=Z.fromCardList(60,w.basic),this.deck.shuffle(),this.sockets={},this.players={},this.turnPhase=0,this.activeTurn="",this.sendableLogs=[],this.log("Server reset!"),this.init(this.serverPort)}static createName(){return[["Cheddar","Swiss","Sewer","Moist","Crusty","Crunchy","Crispy","Bam","Bang","Slam","Meow","Bark","Grand","Del","Dip","Rich","Povert","Rogue","Joleto","Tad","Italian","Spicy","Salty","Sweet","Sour","Bitter","Stinky","Irritating","Meaty","Cool","Neato","Awesome","Sassy"],["amole","lotion","bacon","slice","sliver","fluid","ian","jess","tad","Loaf","Crust","Crunch","Crisp","Ioli","Head","Ino","Pants","Zilla","Shirt","Shoes","Hat","Glove","Sock","Spaghetti","Oritto","Ravioli","Gnocchi","Chilada","Pierogi","Burrito","Taco","Enchilada","Tamale","Changa","Dilla","Nachos","Tilla","Chip","Salsa","Guacamole","Asaurus","Eratops"],[" Mc"," "," "," "," "," "," "," "," Mac"," O'"],["Pan","Tad","Crap","Gene","Friendly","Spicy","Hate","Spinach","Slam","Magic","Eraser","Bougie","Ball","Supremo","Bean","Burger","Bread","Biscuit","Bacon","Bun","Biscuit","Burger","Bread","Kitty","Wood","Morning","Soft","Hard","Raging","",""],["Plumbing","Orama","Adic","Tastic","Full","Loaf","Fruit","Table","Chair","Brian","Brain","Atomy","Acist","Ologist","Doofus","Dorkus","Itis","Person","Biden","Trump","Obama","Bush","Clinton","Reagan","Carter","Folk","Ford","Sandal","Muncher","Potato","Whiskey","Bourbon"]].map((J,K)=>{let Q=J[Math.floor(Math.random()*J.length)];if(K>0&&!Q.startsWith(" "))Q=Q.toLowerCase();return Q}).join("").split(" ").map((J)=>J[0].toUpperCase()+J.substring(1).toLowerCase()).join(" ")}log($){console.log($),this.logEntries.push($.toString())}gameLog($){this.sendableLogs.push($)}getDeck(){return this.deck}addPlayer(){if(this.serverConfig.fairness)Object.values(this.players).forEach((J)=>J.addTurns(1));let $=Math.random().toString(36).substring(7);if(this.players[$]=new o(this.serverConfig.startingHand,this.deck).setTurnPlacement(Object.keys(this.players).length),this.players[$].addEvent("new_upgrade",(J)=>{this.updateUpgradeShop($)}),this.activeTurn==="")this.activeTurn=$,this.players[$].setHost();return{id:$,index:Object.keys(this.players).length-1}}addBot(){if(this.serverConfig.fairness)Object.values(this.players).forEach((J)=>J.addTurns(1));let $=Math.random().toString(36).substring(7);return this.players[$]=new o(this.serverConfig.startingHand,this.deck).setTurnPlacement(Object.keys(this.players).length).setName(s.createName()).setBot(),this.gameLog(`${this.players[$].getLogText()} joined the game as a bot.`),$}incrementPhase(){let $={owner:this.getActive(),opps:Object.values(this.players).filter((V)=>V!==this.getActive()),deck:this.deck},J=Object.keys(this.players).length>=2&&this.getActive().cih().length>=2&&this.getActive().cih().some((V)=>V.canBeGiven(this.getActive(),{...$,card:V})),K=this.getActive().cih().some((V)=>V.canBePlayed({owner:this.getActive(),opps:Object.values(this.players).filter((F)=>F!==this.getActive()),deck:this.deck,card:V}))||this.getActive().getProp("meta_upgrade").some((V)=>{return V.getData($)}),Q=this.getActive().cih().length>this.getActive().getHandsize();if(this.turnPhase===0)if(J)this.turnPhase=1;else if(K)this.turnPhase=2;else if(Q)this.turnPhase=3;else this.incrementTurn();else if(this.turnPhase===1)if(K)this.turnPhase=2;else if(Q)this.turnPhase=3;else this.incrementTurn();else if(this.turnPhase===2)if(Q)this.turnPhase=3;else this.incrementTurn();this.updateAllStates()}incrementTurn(){if(this.gameLog(`${this.getActive().getLogText()} ended their turn.`),this.gameLog("===NEW TURN==="),this.turnPhase=0,Object.values(this.players).length==0)this.activeTurn="",this.updateAllStates();else if(this.activeTurn=Object.keys(this.players)[(Object.keys(this.players).indexOf(this.activeTurn)+1)%Object.keys(this.players).length],this.gameLog(`${this.getActive().getLogText()} begins their turn.`),this.updateAllStates(),this.getActive().skipCheck())this.gameLog(`${this.getActive().getLogText()} is skipped.`),this.incrementTurn();else if(this.getActive().isBot())this.playBotTurn()}playBotTurn(){let $=Object.keys(this.players).filter((V)=>V!==this.activeTurn).map((V)=>this.players[V]),J={owner:this.getActive(),opps:$,deck:this.deck};this.getActive().draw(this.deck,1),this.gameLog(`${this.getActive().getLogText()} draws a card.`);let K=null;try{K=this.getActive().cih().filter((V)=>V.canBePlayed({...J,card:V}))}catch(V){this.gameLog(`${this.getActive().getLogText()} has an error in their hand: ${V}`)}if(this.turnPhase=1,this.updateAllStates(),this.getActive().cih().length>=2){let V=this.getActive().weightedGive(J);if(V){let F=$[Math.floor(Math.random()*$.length)];this.gameLog(`${this.getActive().getLogText()} gives ${V.getLogText()} to ${F.getLogText()}.`),this.getActive().give(V,F)}}else this.gameLog(`${this.getActive().getLogText()} doesn't have enough cards to be generous.`);let Q=K.length>0;if(Q)this.turnPhase=2;else this.turnPhase=3;if(this.updateAllStates(),Q){let V=this.getActive().weightedPlay(J);if(V)this.gameLog(`${this.getActive().getLogText()} plays ${V.getLogText()}.`),this.getActive().play(V,$,this.deck);this.turnPhase=3,this.updateAllStates()}this.getActive().weightedDiscardToHand(J),this.incrementTurn()}updateUpgradeShop($){this.sockets[$].send(JSON.stringify({type:G.TRANSFER_UPGRADE_SHOP,shop:this.getActive().getProp("meta_upgrade").map((K)=>{return K.getData({owner:this.players[$],opps:[],deck:this.deck})})}))}disconnect($,J=""){for(let K of this.players[$].cih())this.deck.discardPile.push(K);if($===this.activeTurn)this.incrementTurn();if(this.log(`Player ${$} disconnected (${this.players[$].getLogText()}) - ${J}`),this.gameLog(`${this.players[$]} disconnected.`),this.sockets[$])this.sockets[$].send(JSON.stringify({type:G.SERVER_MSG,message:J})),this.sockets[$].send(JSON.stringify({type:G.DISCONNECTED}));if(delete this.players[$],delete this.sockets[$],this.serverConfig.fairness)Object.values(this.players).forEach((K)=>K.addTurns(-1));if(Object.keys(this.players).length>0){let K=Object.keys(this.players).find((Q)=>!this.players[Q].isBot());if(K)this.players[K].setHost(),this.gameLog(`${this.players[K]} is now the host.`);else this.log("No non-bots left, server entering reset mode"),this.reset()}if(Object.keys(this.players).length===0)this.activeTurn="",this.log("No non-bots left, server entering reset mode"),this.reset();this.updateAllStates()}getActive(){if(this.activeTurn==="")throw new Error("No active turn");return this.players[this.activeTurn]}sendState($){let J=Object.keys(this.players).filter((V)=>V!==$).map((V)=>this.players[V]),K=Object.keys(this.players).indexOf(this.activeTurn),Q=Object.keys(this.players).indexOf($);if(this.players[$].isBot())return;this.sockets[$].send(JSON.stringify({type:G.UPDATE_PLAYER_STATE,state:{game:{players:Object.values(this.players).map((V,F)=>V.getPrivate(F===Q)),turnPhase:this.turnPhase,uis:this.players[$].getUIs(),activeTurn:K,deck:this.deck.length,config:this.serverConfig,logs:this.sendableLogs.map((V)=>V.toString()),discard:this.deck.discardPile.map((V)=>({name:V.getName(),text:V.getFormulatedText({owner:this.players[$],opps:J,deck:this.deck,card:V}),rarity:V.getRarity(),props:V.getProps()}))},personal:this.players[$].getCards(J,this.deck)}}))}updateAllStates(){Object.keys(this.players).forEach(($)=>this.sendState($))}adjustAIHeuristics($=250){console.log("Adjusting AI heuristics...");let J=N1($,!1);for(let K of Object.keys(R)){console.log(`\n=== ${K} ===`);for(let Q of Object.keys(J))if(R[K][Q]){let V=Math.round(R[K][Q]*J[Q]*100)/100;console.log(`${Q}: ${R[K][Q]} -> ${V}`),R[K][Q]=V}}}init($=15912){let J=this;if(J.log(`Server initialized on port ${$}`),this.serverPort=$,!this.booted)this.adjustAIHeuristics();this.booted=!0,this.serverObj=new T1({port:$}),this.serverObj.on("connection",function K(Q){Q.on("message",function F(W){let z=JSON.parse(W),M=z.id,T=Object.keys(J.players).filter((S)=>S!==M).map((S)=>J.players[S]);switch(z.type){case G.SET_NAME:if(z.name.length<1)z.name=s.createName();J.players[M].setName(z.name),J.gameLog(`${J.players[M].getLogText()} joined the game`),J.updateAllStates();break;case G.DRAW_CARD:if(J.activeTurn==M&&J.turnPhase==0)J.players[M].draw(J.deck,1),J.gameLog(`${J.players[M].getLogText()} drew a card.`),J.incrementPhase();else if(J.activeTurn!==M)Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be played - not your turn."}));else Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be played - not the draw phase."}));J.updateAllStates();break;case G.GIVE_CARD:let S=z.idInHand,A=Object.keys(J.players)[z.target];if(J.activeTurn==M&&J.turnPhase==1&&A!==M&&J.players[M].cih().length>=2&&J.players[M].cih()[S].canBeGiven(J.players[A],{card:J.players[M].cih()[S],owner:J.players[M],opps:T,deck:J.deck}))J.gameLog(`${J.players[M].getLogText()} gives ${J.players[M].cih()[S].getLogText()} to ${J.players[A].getLogText()}.`),J.players[M].give(J.players[M].cih()[S],J.players[A]),J.incrementPhase();else if(J.activeTurn===M)Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be gifted - not your turn."}));else if(J.turnPhase!==1)Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be gifted - not the give phase."}));else if(J.players[M].cih().length<2)J.gameLog(`${J.players[M].getLogText()} doesn't have enough cards to be generous.`),J.incrementPhase();else Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be gifted - not giveable to this player."}));break;case G.GET_CHOICES:let i=z.idInHand,P=J.players[M].cih()[i];if(P.canBePlayed({owner:J.players[M],opps:T,deck:J.deck,card:P})&&J.activeTurn===M&&J.turnPhase==2){let h=JSON.stringify({type:G.CHOICE_LIST,card:i,splits:P.getAbilities().map((k)=>k.getChoices().length),choices:P.getChoices({owner:J.players[M],opps:T,deck:J.deck,card:P})});Q.send(h)}else if(J.activeTurn===M)Q.send(JSON.stringify({type:G.ERROR,message:"This card can't have choices selected - not your turn."}));else if(J.turnPhase!==2)Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be played - not the play phase."}));else Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be played"}));break;case G.PLAY_CARD:let W1=z.idInHand,v=J.players[M].cih()[W1],z1=z.choices,j=z1.map((h,k)=>{let C=v.orderAbilities()[k];return h.map((r,G1)=>{switch(C.informChoices({owner:J.players[M],opps:T,deck:J.deck,card:v})[G1].choice){case L.OPPONENT:case L.PLAYER:return J.players[Object.keys(J.players)[r]];case L.CARD_IN_HAND:return J.players[M].cih()[r];case L.CARD_IN_DISCARD:return J.deck.discardPile[r]}})});if(J.activeTurn===M&&J.turnPhase==2&&v.canBePlayed({owner:J.players[M],opps:T,deck:J.deck,card:v})){let h={owner:J.players[M],opps:T,deck:J.deck,card:v};if(v.getChoices(h).length>0)J.gameLog(`${J.players[M].getLogText()} plays ${v.getLogText()} with the following choices:\n${z1.map((k,C)=>`${v.orderAbilities()[C].getFormulatedText(h)}: ${j[C].map((r)=>r.getLogText()).join(", ")}`).join("\n")}`);else J.gameLog(`${J.players[M].getLogText()} plays ${v.getLogText()}.`);J.players[M].play(v,T,J.deck,j),J.incrementPhase()}else if(J.activeTurn===M)Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be played - not your turn."}));else if(J.turnPhase!==2)Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be played - not the play phase."}));else Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be played - not playable."}));break;case G.DISCARD_TO_HAND:let O1=z.idInHand;if(J.activeTurn!==M)Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be discarded - not your turn."}));else if(J.turnPhase!==3)Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be discarded - not the discard phase."}));else if(J.players[M].cih().length<=J.players[M].getHandsize())Q.send(JSON.stringify({type:G.ERROR,message:"This card can't be discarded - you don't have enough cards in hand."})),J.updateAllStates(),J.incrementTurn();else for(let h of O1)if(J.players[M].cih().length>=h+1){let k=[J.players[M].cih()[h]];J.players[M].setCiH(J.players[M].cih().filter((C)=>!k.includes(C)));for(let C of k)J.deck.discardPile.push(C);if(J.updateAllStates(),J.players[M].cih().length<=J.players[M].getHandsize())break}break;case G.ADD_BOT:if(J.players[M].isHost())J.addBot(),J.updateAllStates();else Q.send(JSON.stringify({type:G.ERROR,message:"You can't add a bot - you aren't the host."}));break;case G.KICK_PLAYER:if(J.players[M].isHost()){let h=z.target,k=Object.keys(J.players)[h];if(k===M)Q.send(JSON.stringify({type:G.ERROR,message:"You can't kick yourself."}));else J.gameLog(`${J.players[M]} kicked ${J.players[k]}.`),J.disconnect(k,z.message??"The host hated your guts.")}else Q.send(JSON.stringify({type:G.ERROR,message:"You can't kick a player - you aren't the host."}));break;case G.TRANSFER_UPGRADE_SHOP:if(J.getActive().getUIs().upgrade)J.updateUpgradeShop(M);else Q.send(JSON.stringify({type:G.ERROR,message:"You haven't unlocked the upgrade shop."}));break;case G.BUY_UPGRADE:let y=z.upgrade,a=J.getActive().getProp("meta_upgrade");if(J.activeTurn!==M)Q.send(JSON.stringify({type:G.ERROR,message:"You can't buy an upgrade - not your turn."}));else if(!J.getActive().getUIs().upgrade)Q.send(JSON.stringify({type:G.ERROR,message:"You can't buy an upgrade - you haven't unlocked the upgrade shop."}));else if(J.turnPhase!==2)Q.send(JSON.stringify({type:G.ERROR,message:"You can't buy an upgrade - not the play phase."}));else if(a.length<=y||y<0||a[y].locked()||!a[y].canPayCost({owner:J.getActive(),opps:T,deck:J.deck}))Q.send(JSON.stringify({type:G.ERROR,message:"You can't buy an upgrade - invalid upgrade."}));else a[y].unlock({owner:J.getActive(),opps:T,deck:J.deck}),J.gameLog(`${J.getActive().getLogText()} bought ${a[y].getData({owner:J.getActive(),opps:T,deck:J.deck}).name}.`),J.incrementPhase(),J.updateAllStates(),J.updateUpgradeShop(M);break}}),Q.on("close",function F(W,z){let M=Object.keys(J.sockets).find((T)=>J.sockets[T]===Q);J.disconnect(M)});let V=J.addPlayer();J.sockets[V.id]=Q,Q.send(JSON.stringify({type:G.CONNECTED,connected:V.id,host:Object.keys(J.players)[0]==V.id,turn:V.index}))})}}var I1=new s;I1.init(15912);
