// @bun
class I extends Array{constructor(){super(...arguments)}discardPile=[];props={};set($){return this.splice(0,this.length,...$),this}asArray(){return this}addCard($,J=1){for(let Q=0;Q<J;Q++)this.push($.clone());return this}addCards($){return this.push(...$),this}shuffle(){for(let $=this.length-1;$>0;$--){const J=Math.floor(Math.random()*$),Q=this[$];this[$]=this[J],this[J]=Q}}reshuffle(){this.push(...this.discardPile),this.discardPile=[],this.shuffle()}draw($=1){let J=[];for(let Q=0;Q<$;Q++){if(this.length===0)this.reshuffle();J.push(this.pop())}return J}static fromCardList($,J){let Q={};for(let z of J){if(!Q[z.getRarity()])Q[z.getRarity()]=0;Q[z.getRarity()]++}let K={},V=0;for(let z of Object.keys(Q))K[z]=$*Math.pow(0.75,Object.keys(Q).indexOf(z)),V+=K[z];for(let z of Object.keys(Q))K[z]=Math.round(K[z]/V*$);let j=new I;for(let z of J)j.addCard(z.clone(),K[z.getRarity()]);return j}}var N;(function(V){V[V["PLAYER"]=0]="PLAYER";V[V["OPPONENT"]=1]="OPPONENT";V[V["CARD_IN_HAND"]=2]="CARD_IN_HAND";V[V["CARD_IN_DISCARD"]=3]="CARD_IN_DISCARD"})(N||(N={}));var Z;(function(H){H[H["SELF"]=0]="SELF";H[H["OPPONENT_MOST_CARDS"]=1]="OPPONENT_MOST_CARDS";H[H["OPPONENT_LEAST_CARDS"]=2]="OPPONENT_LEAST_CARDS";H[H["OPPONENT_RANDOM"]=3]="OPPONENT_RANDOM";H[H["PLAYER_RANDOM"]=4]="PLAYER_RANDOM";H[H["PLAYER_MOST_CARDS"]=5]="PLAYER_MOST_CARDS";H[H["PLAYER_LEAST_CARDS"]=6]="PLAYER_LEAST_CARDS";H[H["CARD_IN_HAND_LEAST_POWER"]=7]="CARD_IN_HAND_LEAST_POWER";H[H["CARD_IN_HAND_MOST_POWER"]=8]="CARD_IN_HAND_MOST_POWER";H[H["CARD_IN_HAND_RANDOM"]=9]="CARD_IN_HAND_RANDOM";H[H["CARD_IN_DISCARD_LEAST_POWER"]=10]="CARD_IN_DISCARD_LEAST_POWER";H[H["CARD_IN_DISCARD_MOST_POWER"]=11]="CARD_IN_DISCARD_MOST_POWER";H[H["CARD_IN_DISCARD_RANDOM"]=12]="CARD_IN_DISCARD_RANDOM";H[H["OPPONENT_MOST_TURNS_REMAINING"]=13]="OPPONENT_MOST_TURNS_REMAINING";H[H["OPPONENT_LEAST_TURNS_REMAINING"]=14]="OPPONENT_LEAST_TURNS_REMAINING";H[H["PLAYER_MOST_TURNS_REMAINING"]=15]="PLAYER_MOST_TURNS_REMAINING";H[H["PLAYER_LEAST_TURNS_REMAINING"]=16]="PLAYER_LEAST_TURNS_REMAINING"})(Z||(Z={}));var Y;(function(O){O[O["BASIC"]=0]="BASIC";O[O["COMMON"]=1]="COMMON";O[O["UNCOMMON"]=2]="UNCOMMON";O[O["RARE"]=3]="RARE";O[O["MYTHIC"]=4]="MYTHIC";O[O["LEGENDARY"]=5]="LEGENDARY";O[O["HAXOR"]=6]="HAXOR"})(Y||(Y={}));class S{callback;cachedValue;value=!1;constructor($){if(this.callback=$,typeof $!=="function")this.value=!0,this.cachedValue=$}resolve(...$){if(this.value)return this.cachedValue;return this.callback(...$)}getCallback(){return this.callback}}class F{name;abilities=[];power=1;rarity=Y.COMMON;canPlay=new S(!0);canGive=new S(!0);discardable=!0;props={};constructor($,J){this.name=$,this.abilities=J}setCanPlay($){return this.canPlay=new S($),this}setCanGive($){return this.canGive=new S($),this}setProps($){return this.props=$,this}setProp($,J,Q){return this.props[$]=J,this}addAbility($){return this.abilities.push($),this}getChoices($){return this.orderAbilities().map((J)=>{return J.informChoices({...$,card:this})}).flat()}skipDiscard(){return this.discardable=!1,this}doSkipDiscard(){return!this.discardable}getProps(){return this.props}getProp($){return this.getProps()[$]}clone(){let $=new F(this.name,this.abilities.map((J)=>J.clone()));return $.setPow(this.power),$.setRarity(this.rarity),$.setCanPlay(this.canPlay.getCallback()),$.setCanGive(this.canGive.getCallback()),$.setProps({...this.props}),$}canBePlayed($){if(this.abilities.map((Q)=>Q.canBePlayed($)).includes(!1))return!1;return this.canPlay.resolve($)}canBeGiven($,J){if(this.abilities.map((K)=>K.canBeGiven($,J)).includes(!1))return!1;return this.canGive.resolve($,J)}setRarity($){return this.rarity=$,this}getRarity(){return this.rarity}getAbilities(){return this.abilities}getWeights($){let J=this.abilities.map((K)=>K.getWeights()),Q={play:0,give:0,discard:0};for(let K of J){if(typeof K.play==="function")Q.play+=K.play($);else Q.play+=K.play;if(typeof K.give==="function")Q.give+=K.give($);else Q.give+=K.give;if(typeof K.discard==="function")Q.discard+=K.discard($);else Q.discard+=K.discard}return Q}getName(){return this.name}setName($){return this.name=$,this}toCardState(){return{name:this.name,power:this.power,rarity:this.rarity,text:this.getText(),props:this.props}}getLogText(){return`\xA7\xA7${this.name}\xA7card\xA7${JSON.stringify(this.toCardState())}\xA7\xA7`}pow(){return Math.min(this.power,999)}setPow($){if(this.power=$,this.power>999)this.power=999;return this}explode(){let $=[];if(this.getProp("fragment"))return $;else{let J=1;for(let Q of this.orderAbilities()){let K=new F(`${this.getName()} Fragment #${J}`,[Q.clone()]).setPow(this.pow()).setRarity(this.getRarity()).setProps({...this.props});K.setProp("fragment",!0),J++,$.push(K)}return $}}orderAbilities(){return this.abilities.sort(($,J)=>{if($.constructor.name==="CostAbility"&&J.constructor.name!=="CostAbility")return-1;else if($.constructor.name!=="CostAbility"&&J.constructor.name==="CostAbility")return 1;else if($.constructor.name==="PlayerRestrictionAbility"&&J.constructor.name!=="PlayerRestrictionAbility")return-1;else if($.constructor.name!=="PlayerRestrictionAbility"&&J.constructor.name==="PlayerRestrictionAbility")return 1;else if($.constructor.name==="PlayerRestrictionAbilityNeg"&&J.constructor.name!=="PlayerRestrictionAbilityNeg")return-1;else if($.constructor.name!=="PlayerRestrictionAbilityNeg"&&J.constructor.name==="PlayerRestrictionAbilityNeg")return 1;else if($.constructor.name==="PlayerPredicateRestrictionAbility"&&J.constructor.name!=="PlayerPredicateRestrictionAbility")return-1;else if($.constructor.name!=="PlayerPredicateRestrictionAbility"&&J.constructor.name==="PlayerPredicateRestrictionAbility")return 1;else if($.hasRestriction()&&!J.hasRestriction())return-1;else if(!$.hasRestriction()&&J.hasRestriction())return 1;return 0})}fireEvents($,J){for(let Q of this.orderAbilities())Q.fireEvents($,J)}play($,J,Q,K){let V=0;if(this.canBePlayed({owner:$,opps:J,deck:Q,card:this}))for(let j of this.orderAbilities()){let z=K?K[V]:void 0;j.fireEvents("play",{owner:$,opps:J,deck:Q,card:this,choices:z}),V++}}draw($,J,Q){for(let K of this.orderAbilities())K.fireEvents("draw",{owner:$,opps:J,deck:Q,card:this})}give($,J,Q){for(let K of this.orderAbilities())K.fireEvents("give",{owner:$,opps:J,deck:Q,card:this})}discard($,J,Q){for(let K of this.orderAbilities())K.fireEvents("discard",{owner:$,opps:J,deck:Q,card:this})}getText(){return this.orderAbilities().map((J)=>J.getText()).join("\n")}getFormulatedText($){return this.orderAbilities().map((Q)=>Q.getFormulatedText($)).join("\n")}getFormulas(){return this.orderAbilities().map((J)=>{if(J.hasFormula())return J.getFormula();return""})}getTraits($){let Q=this.orderAbilities().map((V)=>V.ai()),K={profile:{},meta:{}};for(let V of Q)for(let j of Object.keys(V.profile)){let z=new S(V.profile[j]).resolve($);if(K.profile[j])K.profile[j]+=z;else K.profile[j]=z}return K.meta={pgp:Q.map((V)=>V.meta.pgp).flat(),pbp:Q.map((V)=>V.meta.pbp).flat()},K}static combine(...$){let J=$.map((V)=>V.clone()),Q=new F(J.map((V)=>V.getName()).join(" + "),[...J.map((V)=>V.getAbilities()).flat()]);Q.setPow(Math.floor(J.map((V)=>V.pow()).reduce((V,j)=>V+j,0)/J.length)),Q.setRarity(Math.floor(J.map((V)=>V.getRarity()).reduce((V,j)=>V+j,0)/J.length)),Q.setCanPlay((V)=>{for(let j of J)if(!j.canBePlayed(V))return!1;return!0});let K={};for(let V of J)K={...K,...V.getProps()};return Q.setProps(K),Q}}var N0={Jesse:{collectResource:10,spendResource:-5,affectsSelf:5,affectsOpponents:20,changesGame:5,meme:10,oppWinSetback:50,discardOpponentCards:10},Ian:{collectResource:20,spendResource:10,drawCards:10,changesGame:10,affectsSelf:15}},u=N0;class C{optimality=1;profile={};profileName="";constructor($=""){if(u[$])this.profileName=$;else this.profileName=Object.keys(u)[Math.floor(Math.random()*Object.keys(u).length)];this.profile=u[$]}getProfileName(){return this.profileName}getProfile(){return this.profile}static makeSpecificChoice($,J){let Q=[];if(J.pointer instanceof Function)Q.push(J.pointer($));else switch(J.pointer){case Z.SELF:Q.push($.owner);break;case Z.OPPONENT_MOST_CARDS:Q.push(...$.opps.sort((V,j)=>j.inHand()-V.inHand()));break;case Z.OPPONENT_LEAST_CARDS:Q.push(...$.opps.sort((V,j)=>V.inHand()-j.inHand()));break;case Z.OPPONENT_RANDOM:let K=$.opps.sort(()=>Math.random()-0.5);Q.push(...K);break;case Z.CARD_IN_DISCARD_LEAST_POWER:Q.push(...$.deck.discardPile.sort((V,j)=>{if(!V||!j)return 0;return V.pow()-j.pow()}));break;case Z.CARD_IN_DISCARD_MOST_POWER:Q.push(...$.deck.discardPile.sort((V,j)=>{if(!V||!j)return 0;return j.pow()-V.pow()}));break;case Z.CARD_IN_DISCARD_RANDOM:Q.push(...$.owner.cih().sort(()=>Math.random()-0.5));break;case Z.CARD_IN_HAND_LEAST_POWER:Q.push(...$.owner.cih().sort((V,j)=>{if(!V||!j)return 0;return V.pow()-j.pow()}));break;case Z.CARD_IN_HAND_MOST_POWER:Q.push(...$.owner.cih().sort((V,j)=>{if(!V||!j)return 0;return j.pow()-V.pow()}));break;case Z.CARD_IN_HAND_RANDOM:Q.push(...$.owner.cih().sort(()=>Math.random()-0.5));break;case Z.PLAYER_RANDOM:Q.push(...[$.owner,...$.opps].sort(()=>Math.random()-0.5));break;case Z.PLAYER_MOST_CARDS:Q.push(...[$.owner,...$.opps].sort((V,j)=>j.inHand()-V.inHand()));break;case Z.PLAYER_LEAST_CARDS:Q.push(...[$.owner,...$.opps].sort((V,j)=>V.inHand()-j.inHand()));break;case Z.PLAYER_MOST_TURNS_REMAINING:Q.push(...[$.owner,...$.opps].sort((V,j)=>j.getTurns()-V.getTurns()));break;case Z.PLAYER_LEAST_TURNS_REMAINING:Q.push(...[$.owner,...$.opps].sort((V,j)=>V.getTurns()-j.getTurns()));break;case Z.OPPONENT_MOST_TURNS_REMAINING:Q.push(...$.opps.sort((V,j)=>j.getTurns()-V.getTurns()));break;case Z.OPPONENT_LEAST_TURNS_REMAINING:Q.push(...$.opps.sort((V,j)=>V.getTurns()-j.getTurns()));break}return Q}optimalityCrux($){let J=this.optimality,Q=$.length,K=(j)=>{let z=2*Q,O=-(1-J)*j;return z*(1-1/(1+Math.E**O))},V=Math.random()*100;return $[Math.floor(K(V))]}selectChoices($,J){if(!J.card)return[];else{let Q=J.card.getChoices(J),K=[];for(let V of Q)K.push(this.optimalityCrux(C.makeSpecificChoice(J,V)))}}evaluate($,J){let Q=$.getTraits(J),K=0;for(let V in Q)if(Q[V]!==void 0)K+=Q[V]*this.profile[V];return K}}class X{text;callback;choices=new S([]);formula="{pow}";weights={play:1,give:1,discard:1};canPlay=new S(!0);canGive=new S(!0);props={};events={};traits={profile:{},meta:{}};constructor($,J,Q){this.text=$,this.callback=Q,this.choices=new S(J),this.addEvent("play",(K)=>{this.exec(K)})}ai(){return this.traits}sai($,J={}){return this.traits.profile=$,this.traits.meta=J,this}isCostAbility(){return this.props.cost_ability??!1}clone(){let $=new X(this.text,this.choices.resolve(),this.callback);return $.setFormula(this.formula),$.setWeights(this.weights),$.setCanPlay(this.canPlay.getCallback()),$.setCanGive(this.canGive.getCallback()),$.sai(JSON.parse(JSON.stringify(this.ai()))),$}getChoices(){return this.choices.resolve()}getCallback(){return this.callback}setCanPlay($){return this.canPlay=new S($),this}setCanGive($){this.canGive=new S($)}canBePlayed($){return this.canPlay.resolve($)}canBeGiven($,J){return this.canGive.resolve($,J)}setText($){return this.text=$,this}hasRestriction(){return typeof this.canPlay==="function"||!this.canPlay}getText(){return this.text.replace("{formula}",this.textualizeFormula())}getFormulatedText($){return this.text.replace("{formula}",this.calcFormula($))}setWeights($){return this.weights=$,this}getWeights(){return this.weights}informChoices($){return this.choices.resolve($)}setFormula($){return this.formula=$,this}textualizeFormula(){let $=this.formula;for(let J in this.props)$=$.replace(`{${J}}`,this.props[J]);return $}calcFormula($){let J=this.textualizeFormula();return J=J.replace("{pow}",$.card.pow().toString()),(0, eval)(J)}makeChoices($){let J=[];for(let Q of this.informChoices($)){let K=C.makeSpecificChoice($,Q),V=0;if((Q.restriction??((z)=>!0))($)||J.indexOf(K[V])!==-1&&Q.distinct)while(J.indexOf(K[V])!==-1&&V<K.length-1)V++;if(V>=K.length)J.push(null);J.push(K[V])}return J}exec($){this.callback($,$.choices??this.makeChoices($))}on($,J){return this.addEvent($,J),this}addEvent($,J){if(!this.events[$])this.events[$]=[];this.events[$].push(J)}removeEvent($){if(this.events[$])delete this.events[$];return this}getEvent($){return this.events[$]}hasFormula(){return this.text.indexOf("{formula}")!==-1}getFormula(){return this.formula}fireEvents($,J){if(this.events[$])for(let Q of this.events[$])Q(J);if(this.events[`temp_${$}`]){for(let Q of this.events[`temp_${$}`])Q(J);delete this.events[`temp_${$}`]}}getProps(){return this.props}getProp($){return this.props[$]}setProp($,J){return this.props[$]=J,this}}class t extends X{constructor($){super("Increase the power of a card in your hand by {formula}",[{choice:N.CARD_IN_HAND,pointer:Z.CARD_IN_HAND_LEAST_POWER}],(J,Q)=>{if(J.choices)J.choices[0].setPow(J.choices[0].pow()+$+J.card.pow())});this.sai({improvesCard:(J)=>{return J.pow()+$}}),this.setFormula(`{pow} + ${$}`)}}class D extends X{constructor($){super("Draw {formula} cards",[],(J,Q)=>{J.owner.draw(J.deck,J.card.pow()+$)});this.sai({drawsCards:(J)=>J.card.pow()+$}),this.setFormula(`{pow} + ${$}`)}}class K0 extends X{constructor($){super("Each player draws {formula} cards",[],(J,Q)=>{J.owner.draw(J.deck,J.card.pow()+$);for(let K of J.opps)K.draw(J.deck,J.card.pow()+$)});this.sai({drawsCards:$,drawsOpponentCards:$}),this.setFormula(`{pow} + ${$}`)}}class b extends X{constructor($){super("Opponent discards {formula} cards at random",[{choice:N.OPPONENT,pointer:Z.OPPONENT_MOST_CARDS}],(J,Q)=>{let K=Q[0];for(let V=0;V<J.card.pow()+$;V++){if(K.inHand()===0)break;K.discardChoose(J)}});this.sai({affectsOpponents:(J)=>J.card.pow()+$/J.opps.length,discardsOpponentCards:(J)=>J.card.pow()+$}),this.setWeights({play:3,discard:0,give:-1}),this.setFormula(`{pow} + ${$}`)}}class U extends X{constructor($){super("Discard {formula} cards at random",[],(J,Q)=>{J.owner.discardRandom(J)});this.sai({affectsSelf:(J)=>J.card.pow()+$,discardsCards:(J)=>J.card.pow()+$}),this.setFormula(`${$} - {pow}`)}}class V0 extends X{qty;constructor($){super("Player discards hand, then draw {formula} cards",[{choice:N.PLAYER,pointer:(J)=>{if(J.owner.inHand()<=J.card.pow()+$)return J.owner;for(let Q of J.opps)if(Q.inHand()>J.card.pow()+$)return Q;return[J.owner,...J.opps].sort((Q,K)=>Q.inHand()-K.inHand())[0]}}],(J,Q)=>{let K=Q.pop();while(K.inHand()>0)J.deck.discardPile.push(K.cih().pop());K.draw(J.deck,this.qty+J.card.pow())});this.sai({discardsCards:(J)=>{let Q=J.owner;if(Q.selectChoices(this)===Q)return Q.cih().length;return 0},drawsCards:(J)=>{let Q=J.owner;if(Q.selectChoices(this)===Q)return this.qty+J.card.pow();return 0},discardsOpponentCards:(J)=>{let Q=J.owner;if(Q.selectChoices(this)!==Q)return Q.cih().length;return 0},drawsOpponentCards:(J)=>{let Q=J.owner;if(Q.selectChoices(this)!==Q)return this.qty+J.card.pow();return 0},affectsSelf:(J)=>{let Q=J.owner;if(Q.selectChoices(this)===Q)return this.calcFormula(J)-Q.cih().length;return Q.cih().length-this.calcFormula(J)},affectsOpponents:(J)=>{let Q=J.owner;if(Q.selectChoices(this)!==Q)return(this.calcFormula(J)-Q.cih().length)/J.opps.length;return(Q.cih().length-this.calcFormula(J))/J.opps.length}}),this.setProp("qty",$),this.setFormula(`{pow} + ${$}`)}}class m extends X{constructor(){super("Remove all other copies of this card from the game",[],($,J)=>{let Q=$.opps.concat($.owner);for(let K of Q)K.setCiH(K.cih().filter((V)=>{if(!V||!$.card)return!1;return V.getName()!==$.card.getName()}));$.deck.set($.deck.filter((K)=>{if(!K||!$.card)return!1;return K.getName()!==$.card.getName()})),$.deck.discardPile=$.deck.discardPile.filter((K)=>{if(!K||!$.card)return!1;return K.getName()!==$.card.getName()}),$.card.skipDiscard(),$.deck.shuffle()});this.sai({changesGame:1})}}class e extends X{constructor(){super("Explode a card in your hand. The new cards each have power {formula}.",[{choice:N.CARD_IN_HAND,distinct:!0,pointer:Z.CARD_IN_HAND_MOST_POWER,restriction:($)=>{return!$.card.getProp("fragment")}}],($,J)=>{let Q=J[0];$.owner.setCiH($.owner.cih().filter((V)=>V!==Q));let K=Q.explode();$.owner.cih().push(...K)});this.sai({drawsCards:($)=>$.owner.selectChoices(this)[0].explode().length-1,improvesCard:($)=>this.calcFormula($)-$.owner.selectChoices(this)[0].pow()})}}class G extends X{constructor($,J){super(`Add {formula} ${J}`,[],(Q)=>{let K=this.calcFormula(Q),V=Q.owner.getProp(`res_${J}`)??0;Q.owner.setProp(`res_${J}`,V+K,Q)});if(this.setWeights({play:2+$,discard:1-$,give:1-$}),this.setProp("resource",!0),!this.getProp("produce"))this.setProp("produce",[]);this.setProp("produce",[...this.getProp("produce"),J]),this.setFormula(`{pow} + ${$}`),this.sai({collectResource:$})}}class W extends X{constructor($,J){super(`Pay {formula} ${$}`,[],(Q,K)=>{Q.owner.setProp("res_"+$,Q.owner.getProp("res_"+$)-Math.max(J,0),Q)});this.setProp("cost_ability",!0),this.setCanPlay((Q)=>{if(!Q.owner)return!1;return Q.owner.getProp("res_"+$)>=J}),this.setFormula(`${J} - {pow}`),this.sai({spendResource:(Q)=>this.calcFormula(Q)},{pgp:["res_"+$]})}}class f extends X{constructor($,J=75,Q=!0,K=!1){super(`Add the ${$.replace("_"," ").replace(" deck","")} deck to the game${Q?" if it hasn't been already.":""}`,[],(V)=>{if(p[$]&&(!Q||!V.deck.props[`added_${$}`]))V.deck.addCards(I.fromCardList(J,p[$])),V.deck.shuffle()});if(Q&&K)this.setCanPlay((V)=>{return!V.deck.props[`added_${$}`]});this.sai({addCardsToDeck:J,changesGame:1}),this.setProp("deck",!0)}}class P extends X{constructor(){super("Play only if you have 0 or less res_life",[],($)=>{});this.setCanPlay(($)=>{return $.owner.getProp("res_life")&&$.owner.getProp("res_life")<=0}),this.sai({},{pbp:["res_life"]})}}class w extends X{constructor($){super(`When this card is drawn, ${$.getText()[0].toLowerCase()+$.getText().substring(1)}`,$.getChoices(),$.getCallback);this.addEvent("draw",(J)=>{this.exec(J)}),this.removeEvent("play")}}class n extends X{constructor($,J){super("(event stuff)",[],(Q,K)=>{for(let V of $)Q.owner.addEvent(V,J)});this.sai({affectsSelf:$.length,addEvents:$.length})}}class s extends X{constructor($,J){super("(event stuff)",[{choice:N.OPPONENT,pointer:Z.OPPONENT_MOST_CARDS}],(Q,K)=>{let V=K[0];for(let j of $)V.addEvent(j,J)});this.sai({addEvents:$.length,affectsOpponents:$.length})}}class i extends X{constructor($){super("You can now win.",[],(J,Q)=>{J.owner.setCanWin(!0,$)});this.sai({winProgress:100})}}class k extends X{constructor($,J){super("(prop set)",[],(Q,K)=>{Q.owner.setProp($,J,Q)});this.sai({affectsSelf:1})}}class a extends X{constructor($){super("Recover {formula} cards",(J)=>{return new Array($).fill({choice:N.CARD_IN_DISCARD,pointer:Z.CARD_IN_DISCARD_MOST_POWER,distinct:!0})},(J,Q)=>{while(Q.length>0){if(J.deck.discardPile.length==0)break;let K=Q.pop();J.deck.discardPile.splice(J.deck.discardPile.indexOf(K),1),J.owner.cih().push(K)}});this.setCanPlay((J)=>{if(!J.deck)return!1;return J.deck.discardPile.length>=$}),this.sai({drawsCards:$}),this.setFormula(`${$}`)}}class X0 extends X{constructor(){super("Shuffle the discard pile into the deck",[],($,J)=>{$.deck.reshuffle()})}}class _ extends X{constructor($){super(`Play only if you have ${$}`,[],(J)=>{});this.setCanPlay((J)=>{return J.owner.getProp($)}),this.sai({},{pgp:[$]})}}class y extends X{constructor($){super(`Play only if you don't have ${$}`,[],(J)=>{});this.sai({},{pbp:[$]}),this.setCanPlay((J)=>{return!J.owner.getProp($)})}}class r extends X{constructor($,J){super("(event stuff)",[],(Q,K)=>{for(let V of[Q.owner,...Q.opps])for(let j of $)V.addEvent(j,J)});this.sai({addEvents:$.length,affectsSelf:$.length,affectsOpponents:(Q)=>Q.opps.length*$.length})}}class F0 extends X{constructor($,J){super("(prop set)",[],(Q,K)=>{[Q.owner,...Q.opps].forEach((V)=>V.setProp($,J,Q))});this.sai({affectsSelf:1,affectsOpponents:1},{pbp:[$]})}}class $0 extends X{constructor($,J){super(`${$}`,[],(Q)=>{});this.setCanPlay((Q)=>{return J(Q)})}}class Y0 extends X{constructor($){super(`${$}`,[],(J)=>{});this.sai({meme:10})}}class R extends X{constructor($,J=!0){super(`Unlock ${$.getName()} for purchase${J?". Play only if you haven't unlocked it yet.":"."}`,[],(Q)=>{if(Q.owner.upgrades().filter((K)=>K.getName()===$.getName()).length==0)Q.owner.addUpgrade($)});if(J)this.setCanPlay((Q)=>{return Q.owner.upgrades().filter((K)=>K.getName()===$.getName()).length==0});this.sai({changesGame:1,affectsSelf:1})}}class T{data;effect;infinite=!1;scale=1.1;level=0;constructor($,J,Q=!1,K=1.1){this.data=$,this.effect=J,this.infinite=Q,this.scale=K}lvl(){return this.level}getCost(){return this.data.cost}getData($){return{name:this.getName(),description:this.getDescription(),cost:this.getCost(),locked:this.data.locked||!this.canPayCost($)}}getName(){return`${this.data.name}${this.infinite&&this.level>0?` Lvl. ${this.level}`:""}`}getDescription(){let $=this.data.description;$=$.replace("{level}",this.level+"");let J=$.match(/{[^}]*}/g);if(J)for(let Q of J){let K=Q.substring(1,Q.length-1);$=$.replace(Q,(0, eval)(K))}return $}canPayCost($){let J=$.owner.getResources();for(let Q of this.data.cost){if(Q.resource=="turns")continue;if(!J[Q.resource])return!1;if(J[Q.resource]<Q.amt)return!1}return!0}payCost($){let J=$.owner.getResources();for(let Q of this.data.cost)if(Q.resource==="turns"){$.owner.addTurns(Q.amt);continue}else $.owner.setProp(`res_${Q.resource}`,J[Q.resource]-Q.amt,$)}locked(){return this.data.locked}unlock($){if(!this.data.locked)if(this.payCost($),this.effect($,this),this.level++,!this.infinite)this.data.locked=!0;else for(let J of this.data.cost)J.amt=Math.ceil(J.amt*this.scale)}}class j0 extends X{constructor($){super("Add {formula} turns to opponent.",[{choice:N.OPPONENT,pointer:Z.OPPONENT_LEAST_TURNS_REMAINING}],(J,Q)=>{Q[0].addTurns($+J.card?.pow())});this.setWeights({play:3,discard:0,give:-1}),this.setFormula(`{pow} + ${$}`),this.sai({oppWinSetback:$,affectsOpponents:(J)=>$/J.opps.length,winProgress:(J)=>$/J.opps.length/2})}}class g extends X{constructor(){super("You become innoculated with propaganda. You're an antivaxxer now.",[],($,J)=>{$.owner.setProp("antivaxxer",!0)});this.sai({meme:100,changesGame:1,affectsSelf:($)=>$.owner.getProp("antivaxxer")?0:-10},{pbp:["antivaxxer","zombie","res_life"]})}}var O0={radioactivity_deck:[new F("Nuclear Observation",[new n(["draw"],($)=>{if($.card.getProp("radioactive"))$.owner.setProp("knowledge",($.owner.getProp("knowledge")??0)+5,$),$.owner.draw($.deck,1)}).setText("When you draw a radioactive card, gain {formula} knowledge and draw another card.").setFormula("{pow} + 5")]).setRarity(Y.LEGENDARY),new F("Decay",[new w(new U(1)),new U(1)]).setRarity(Y.BASIC).setProp("radioactive",!0),new F("Fusion",[new w(new X("If you have other cards in your hand, combine {formula} of them at random",[],($,J)=>{let Q=$.owner.cih();if(Q.length>2){let K=Q.splice(Math.floor(Math.random()*Q.length),1)[0],V=Q.splice(Math.floor(Math.random()*Q.length),1)[0],j=F.combine(K,V);$.owner.cih().push(j)}})),new U(1)]).setRarity(Y.UNCOMMON).setProp("radioactive",!0),new F("Fission",[new w(new n(["temp_draw"],($)=>{let J=$.card;$.owner.setCiH($.owner.cih().filter((K)=>K!==J));let Q=J.explode().sort((K,V)=>Math.random()-0.5);$.owner.cih().push(Q.pop()),$.deck.discardPile.push(...Q)}).setText("The next card you draw explodes. Keep one fragment at random, and discard the rest.")),new U(1)]).setRarity(Y.RARE).setProp("radioactive",!0)],genetics_deck:[new F("Gene Bank",[new W("metal",20),new _("genetics"),new y("gene_bank"),new k("gene_bank",!0)]).setRarity(Y.RARE).setProp("construction",!0),new F("Analyze Card DNA",[new _("genetics"),new _("gene_bank"),new G(5,"knowledge"),new X("Analyze a card in the discard pile to add its DNA to the gene bank.",[{choice:N.CARD_IN_DISCARD,pointer:Z.CARD_IN_DISCARD_RANDOM}],($,J)=>{if(!$.owner.getProp("dna_research"))$.owner.setProp("dna_research",[],$);let Q=J[0];for(let K of Q.getAbilities())$.owner.getProp("dna_research").push(K);$.deck.discardPile=$.deck.discardPile.filter((K)=>K!==Q)})]).setRarity(Y.UNCOMMON),new F("Spank Bank Variety",[new X("If you have {formula} or more entries in your gene bank, you win the game on your next turn.",[],($,J)=>{if(($.owner.getProp("dna_research")??[]).length>=30-$.card.pow())$.owner.setCanWin(!0,"Genetic Superiority")}).setFormula("30 - {pow}")]).setRarity(Y.LEGENDARY)],explosives_deck:[new F("Grenade",[new _("explosives"),new X("Explode a card at random in an opponents hand, then they discard half that many cards at random.",[{choice:N.OPPONENT,pointer:Z.OPPONENT_LEAST_CARDS}],($,J)=>{let Q=J[0],K=Q.cih()[Math.floor(Math.random()*Q.cih().length)];if(K){Q.setCiH(Q.cih().filter((z)=>z!==K));let V=K.explode(),j=Math.ceil(V.length/2);Q.cih().push(...V);for(let z=0;z<j;z++)Q.discardChoose($)}})]),new F("Dynamite",[new _("explosives"),new X("Explode all cards in the discard pile",[],($,J)=>{let Q=$.deck.discardPile;$.deck.discardPile=[];for(let K of Q){let V=K.explode();$.deck.discardPile.push(...V)}}),new X("Destroy half the cards in the discard pile at random",[],($,J)=>{let Q=$.deck.discardPile;$.deck.discardPile=[];let K=Math.ceil(Q.length/2);for(let V=0;V<K;V++)$.deck.discardPile.push(Q.splice(Math.floor(Math.random()*Q.length),1)[0])}),new a(1)]).setRarity(Y.RARE),new F("Nuclear Bomb",[new _("explosives"),new X("Kill everyone. They discard their hands",[],($,J)=>{let Q=[...$.opps,$.owner];for(let K of Q)K.setProp("res_life",0,$),$.deck.discardPile.concat(K.cih()),K.setCiH([])}),new X("Kill everyone's citizens.",[],($,J)=>{let Q=[...$.opps,$.owner];for(let K of Q)K.setProp("population",0,$)}),new X("Explode all cards in the discard pile",[],($,J)=>{let Q=$.deck.discardPile;$.deck.discardPile=[];for(let K of Q){let V=K.explode();$.deck.discardPile.push(...V)}}),new X0,new f("radioactivity_deck",30,!0)]).setRarity(Y.HAXOR)],academia_deck:[new F("The Scientific Process",[new W("knowledge",5),new R(new T({name:"Rapid Iteration",description:"When you draw a card, if you have more cards than your maximum hand size, randomly combine cards.",cost:[{amt:25,resource:"knowledge"}]},($)=>{$.owner.addEvent("draw",(J)=>{if(J.owner.cih().length>J.owner.getHandsize()&&J.owner.cih().length>=2)while(J.owner.cih().length>J.owner.getHandsize()&&J.owner.cih().length>=2){let Q=J.owner.cih().sort(()=>Math.random()-0.5).slice(0,2),K=F.combine(...Q);K.setProp("hybrid",!0),J.owner.cih().push(K),J.owner.cih().splice(J.owner.cih().indexOf(Q[0]),1),J.owner.cih().splice(J.owner.cih().indexOf(Q[1]),1)}})}))]).setRarity(Y.RARE),new F("Thought that Counts",[new G(1,"knowledge")]).setRarity(Y.BASIC),new F("Receive Public Education",[new G(1,"knowledge"),new D(1),new U(1)]).setRarity(Y.COMMON),new F("Homeschooling",[new G(5,"knowledge"),new g]).setRarity(Y.RARE),new F("Go to University",[new W("tadbucks",10),new G(5,"knowledge"),new D(1)]).setRarity(Y.UNCOMMON),new F("Pseudo-Education",[new G(2,"knowledge"),new g,new f("alchemy_deck",75,!0).setText("Invent alchemy and witchcraft. Add them to the game.")]),new F("Research: Explosives",[new W("knowledge",15),new k("explosives",!0).setCanPlay(($)=>{return!$.owner.getProp("explosives")}).setText("Discover explosives if you haven't already."),new f("explosives_deck",35,!0).setText("Invent explosives. Add them to the game.")]).setProp("research",!0),new F("Research: Genetics",[new W("knowledge",20),new k("genetics",!0).setCanPlay(($)=>{return!$.owner.getProp("genetics")}).setText("Discover genetics if you haven't already."),new f("genetics_deck",35,!0).setText("Invent genetics. You learn cards are sentient. Add it to the game.")])],basic_resource_deck:[new F("Wood Shipment",[new R(new T({name:"Wood Shipment",description:"Order {Math.floor(10 * Math.pow(1.15, {level} + 1)} wood from the Amazon",cost:[{amt:20,resource:"tadbucks"}],locked:!1},($,J)=>{$.owner.addResource("wood",Math.floor(10*Math.pow(1.15,J.lvl())))},!0,1.25))]),new F("Food Shipment",[new R(new T({name:"Wood Shipment",description:"Order {Math.floor(10 * Math.pow(1.15, {level} + 1)} food from the Amazon",cost:[{amt:20,resource:"tadbucks"}],locked:!1},($,J)=>{$.owner.addResource("food",Math.floor(10*Math.pow(1.15,J.lvl())))},!0,1.25))]),new F("Metal Shipment",[new R(new T({name:"Wood Shipment",description:"Order {Math.floor(10 * Math.pow(1.15, {level} + 1)} metal from the Amazon",cost:[{amt:20,resource:"tadbucks"}],locked:!1},($,J)=>{$.owner.addResource("metal",Math.floor(10*Math.pow(1.15,J.lvl())))},!0,1.25))]),new F("Stone Shipment",[new R(new T({name:"Wood Shipment",description:"Order {Math.floor(10 * Math.pow(1.15, {level} + 1)} stone from the Amazon",cost:[{amt:20,resource:"tadbucks"}],locked:!1},($,J)=>{$.owner.addResource("stone",Math.floor(10*Math.pow(1.15,J.lvl())))},!0,1.25))]),new F("Gather Wood",[new G(0,"wood")]).setRarity(Y.BASIC).setProp("resource",!0),new F("Gather Stone",[new G(0,"stone")]).setRarity(Y.BASIC).setProp("resource",!0),new F("Gather Metal",[new G(0,"metal")]).setRarity(Y.BASIC).setProp("resource",!0),new F("Gather Food",[new G(0,"food")]).setRarity(Y.BASIC).setProp("resource",!0),new F("Collect Taxes",[new X("Gain {formula} Tadbucks for each citizen you have.",[],($,J)=>{$.owner.setProp("tadbucks",($.owner.getProp("tadbucks")??0)+$.owner.getProp("population")*($.card.pow()*10),$)}).setFormula("{pow} * 10")]).setRarity(Y.UNCOMMON),new F("Construct Cottage",[new W("wood",5),new W("food",5),new X("Build a cottage. (Adds {formula} housing)",[],($,J)=>{$.owner.setProp("housing",$.card.pow()+($.owner.getProp("housing")??0),$)}),new n(["turn_start"],($)=>{if($.owner.getProp("housing")>$.owner.getProp("population"))$.owner.setProp("population",($.owner.getProp("population")??0)+1,$)}).setText("At the start of your turn, if you have housing, people move in.")]).setRarity(Y.COMMON).setProp("construction",!0),new F("Marketplace Construction",[new y("marketplace"),new W("wood",5),new W("stone",5),new k("marketplace",!0).setText("Unlocks the marketplace"),new X("Get a stimmy check of {formula} tadbucks",[],($,J)=>{$.owner.setProp("tadbucks",($.owner.getProp("tadbucks")??0)+$.card.pow()*10,$)}).setFormula("100 + (10 * {pow})")]).setRarity(Y.MYTHIC).setProp("construction",!0),new F("Research: Improved Agricultural Practices",[new W("knowledge",8),new X("Increase the power of all cards that produce food by {formula}",[],($,J)=>{let Q=[...$.opps,$.owner];for(let K of Q)for(let V of K.cih())if(V.getProp("produce")&&V.getProp("produce").includes("food"))V.setPow(V.pow()+$.card.pow());for(let K of $.deck.discardPile)if(K.getProp("produce")&&K.getProp("produce").includes("food"))K.setPow(K.pow()+$.card.pow());for(let K of $.deck.asArray())if(K.getProp("produce")&&K.getProp("produce").includes("food"))K.setPow(K.pow()+$.card.pow())})]).setRarity(Y.RARE).setProp("research",!0),new F("Research: Improved Logging Practices",[new W("knowledge",8),new X("Increase the power of all cards that produce wood by {formula}",[],($,J)=>{let Q=[...$.opps,$.owner];for(let K of Q)for(let V of K.cih())if(V.getProp("produce")&&V.getProp("produce").includes("wood"))V.setPow(V.pow()+$.card.pow());for(let K of $.deck.discardPile)if(K.getProp("produce")&&K.getProp("produce").includes("wood"))K.setPow(K.pow()+$.card.pow());for(let K of $.deck.asArray())if(K.getProp("produce")&&K.getProp("produce").includes("wood"))K.setPow(K.pow()+$.card.pow())})]).setRarity(Y.RARE).setProp("research",!0),new F("Research: Improved Quarrying Practices",[new W("knowledge",8),new X("Increase the power of all cards that produce stone by {formula}",[],($,J)=>{let Q=[...$.opps,$.owner];for(let K of Q)for(let V of K.cih())if(V.getProp("produce")&&V.getProp("produce").includes("stone"))V.setPow(V.pow()+$.card.pow());for(let K of $.deck.discardPile)if(K.getProp("produce")&&K.getProp("produce").includes("stone"))K.setPow(K.pow()+$.card.pow());for(let K of $.deck.asArray())if(K.getProp("produce")&&K.getProp("produce").includes("stone"))K.setPow(K.pow()+$.card.pow())})]).setRarity(Y.RARE).setProp("research",!0),new F("Research: Improved Mining Practices",[new W("knowledge",8),new X("Increase the power of all cards that produce metal by {formula}",[],($,J)=>{let Q=[...$.opps,$.owner];for(let K of Q)for(let V of K.cih())if(V.getProp("produce")&&V.getProp("produce").includes("metal"))V.setPow(V.pow()+$.card.pow());for(let K of $.deck.discardPile)if(K.getProp("produce")&&K.getProp("produce").includes("metal"))K.setPow(K.pow()+$.card.pow());for(let K of $.deck.asArray())if(K.getProp("produce")&&K.getProp("produce").includes("metal"))K.setPow(K.pow()+$.card.pow())})]).setRarity(Y.RARE).setProp("research",!0)],zombie_deck:[new F("Chomp",[new P,new X("Deal {formula} damage to an opponent. They discard that many cards.",[{pointer:Z.OPPONENT_MOST_CARDS,choice:N.OPPONENT}],($,J)=>{let Q=J[0],K=$.card.pow()*5;if($.owner.getProp("res_life")<=0){Q.setProp("res_life",Q.getProp("res_life")-K,$);for(let V=0;V<K;V++)Q.discardChoose($)}}).setFormula("{pow} * 5")]).setRarity(Y.COMMON),new F("Brain Munchies",[new P,new X("Draw {formula} cards.",[],($,J)=>{if($.owner.getProp("res_life")<=0)$.owner.draw($.deck,$.card.pow())}).setFormula("{pow} + 2")]).setRarity(Y.COMMON),new F("X-49 Antigen",[new X("Play only if you aren't an antivaxxer.",[],($,J)=>{}).setCanPlay(($)=>{return!$.owner.getProp("antivaxxer")}),new X("Heal all zombies. They give you their hands out of gratitude.",[],($,J)=>{if(!$.owner.getProp("antivaxxer"))for(let Q of $.opps)Q.setProp("res_life",10,$),$.owner.setCiH($.owner.cih().concat(Q.cih())),Q.setCiH([])})]).setCanPlay(($)=>{return!$.owner.getProp("antivaxxer")}).setRarity(Y.RARE),new F("Necromutation",[new P,new e,new t(2)]).setRarity(Y.RARE),new F("Zombie Sutures",[new P,new X("Combine the top three non-sutured cards in the discard pile, then add it to your hand {formula} times",[],($,J)=>{let Q=$.deck.discardPile.filter((K)=>K&&K!==$.card&&!K.getProp("sutured"));if(Q=Q.slice(0,3),Q.length>0){let K=new F(`Sutured ${Q.map((V)=>V.clone().getName()).join("-")}`,[...Q.map((V)=>{return V.clone().getAbilities()}).flat()]).setRarity(Y.HAXOR).setProp("sutured",!0);$.deck.discardPile=$.deck.discardPile.filter((V)=>{return!Q.includes(V)});for(let V=0;V<$.card.pow();V++)$.owner.cih().push(K.clone())}}).setFormula("{pow}")]),new F("Rot Brains",[new P,new X("Zombify half the cards in an opponents hand. (They can't play them unless they are a zombie)",[{choice:N.OPPONENT,pointer:Z.OPPONENT_MOST_CARDS}],($,J)=>{let Q=J[0],K=Q.cih(),V=Math.ceil(K.length/2),j=K.map((z,O)=>z.clone()).sort(()=>Math.random()-0.5);for(let z=0;z<V;z++)j[z]=new F(`Zombified ${j[z].getName()}`,[new P,...j[z].getAbilities()]).setPow(j[z].pow()).setRarity(j[z].getRarity()).setProps({zombie:!0,...j[z].getProps()});Q.setCiH(j)})])],alchemy_deck:[new F("Curse of Cuckage",[new w(new D(1)),new s(["temp_can_win"],($)=>{$.owner.setCanWin(!1,"cards in hand")}).setText("The next time an opponent tries to win, they don't.")]).setRarity(Y.HAXOR).setProp("curse",!0),new F("Rite of Suffering",[new W("population",3),new X("Each opponent discards {formula} cards.",[],($,J)=>{for(let Q of $.opps)for(let K=0;K<3;K++)Q.discardChoose($)}).setFormula("3 + {pow}")]).setRarity(Y.MYTHIC).setProp("curse",!0),new F("Curse of Apathy",[new w(new X("Increase your cards to win by {formula}",[],($,J)=>{$.owner.addTurns($.card.pow())})).setFormula("{pow}"),new U(1)]).setRarity(Y.COMMON).setProp("curse",!0),new F("Curse of Suffering",[new w(new X("Lose {formula} life.",[],($,J)=>{if(!$.owner.getProp("res_life"))$.owner.setProp("res_life",1,$);$.owner.setProp("res_life",$.owner.getProp("res_life")-(3+$.card.pow()),$)})).setFormula("3 + {pow}"),new U(1)]).setRarity(Y.COMMON).setProp("curse",!0).setCanGive(!1),new F("Curse of Decay",[new w(new U(1)),new s(["temp_turn_end"],($)=>{$.owner.discardChoose($),$.owner.discardChoose($)}).setText("Choose an opponent. They discard two cards at the end of their next turn.")]).setProp("curse",!0),new F("Connive",[new D(1),new X("Copy a curse in your hand, then put it on top of the deck.",[{choice:N.CARD_IN_HAND,pointer:Z.CARD_IN_HAND_MOST_POWER,restriction:($)=>{return $.owner.cih().filter((J)=>J.getProp("curse")).length>0}}],($,J)=>{let Q=J[0];$.deck.push(Q.clone())}).setCanPlay(($)=>{return $.owner.cih().filter((J)=>J.getProp("curse")).length>0})]).setRarity(Y.RARE)],gambling_deck:[new F("Lady Fortune's Favor",[new _("dice"),new W("tadbucks",20),new U(1),new X("Roll your dice. If you get a {formula} or more, you win the game.",[],($,J)=>{if($.owner.rollDice()>=100-$.card.pow())$.owner.setCanWin(!0,"had Lady Fortune's favor")}).setFormula("100 - {pow}")]).setRarity(Y.MYTHIC),new F("Street Modding",[new _("dice"),new W("tadbucks",15),new X("Add {formula} pips at random to your dice.",[],($,J)=>{let Q=3+$.card.pow(),K=[...$.owner.getProp("dice")??[-1]];for(let V=0;V<Q;V++)K[Math.floor(Math.random()*K.length)]++;$.owner.setProp("dice",K,$)}).setFormula("3 + {pow}")]).setRarity(Y.UNCOMMON),new F("Government Grade Fortunator",[new _("dice"),new W("tadbucks",100),new X("Add {formula} pips at random to your dice.",[],($,J)=>{let Q=10+$.card.pow(),K=[...$.owner.getProp("dice")??[-1]];for(let V=0;V<Q;V++)K[Math.floor(Math.random()*K.length)]++;$.owner.setProp("dice",K,$)}).setFormula("10 + {pow}")]).setRarity(Y.RARE),new F("Dimensionality Tear",[new _("explosives"),new _("dice"),new W("tadbucks",20),new W("knowledge",10),new X("Add 2 sides to your dice, each with pips equal to the total of the rest of the sides of the dice.",[],($,J)=>{let Q=$.owner.getProp("dice").reduce((K,V)=>K+V,0);$.owner.setProp("dice",$.owner.getProp("dice").concat([Q,Q]),$)})]).setRarity(Y.MYTHIC),new F("Gambling Insurance",[new _("casino"),new W("tadbucks",50),new n(["gamble_lose"],($)=>{$.owner.setProp("tadbucks",($.owner.getProp("tadbucks")??0)+$.card.pow()*10,$)}).setText("Whenever you lose at gambling, you gain {formula} Tadbucks.").setFormula("{pow} * 10")]).setRarity(Y.LEGENDARY)],currency_deck:[new F("Telemarketing",[new W("tadbucks",50),new R(new T({name:"Telemarketing",description:"Outsource cold-calling all your opponents, wasting their time.",cost:[{amt:15,resource:"tadbucks"}]},($)=>{$.opps.forEach((J)=>{J.addTurns(2)})},!0,1.35)).setText("Unlocks telemarketing as a way to waste your opponents time.")]).setRarity(Y.RARE),new F("Welfare Handouts",[new X("Cards in your hand lose all costs",[],($,J)=>{let Q=$.owner.cih();for(let K=0;K<Q.length;K++)Q[K]=new F(Q[K].getName(),[...Q[K].getAbilities().map((V)=>{return V.clone()}).filter((V)=>{return!V.isCostAbility()})]).setPow(Q[K].pow()).setRarity(Q[K].getRarity()).setProps(Q[K].getProps())})]).setRarity(Y.LEGENDARY),new F("Moneybags $$$",[new W("tadbucks",2000),new i("achieving wealth")]).setRarity(Y.LEGENDARY),new F("Communism",[new X("Collect all cards from all hands, shuffle them together, then distribute them evenly to all players",[],($,J)=>{let Q=[];for(let V of[$.owner,...$.opps])while(V.inHand()>0)Q.push(V.cih().pop());let K=0;while(Q.length>0)[$.owner,...$.opps][K%[$.owner,...$.opps].length].cih().push(Q.pop()),K++})]).setRarity(Y.MYTHIC),new F("The House Always Wins",[new W("tadbucks",25),new y("casino"),new k("casino",!0).setText("Unlocks membership to the casino."),new k("dice",[1,2,3,4,5,6]).setText("Unlocks a basic 6-sided dice"),new f("gambling_deck",50,!0).setText("Invent gambling. Add it to the game.")]).setRarity(Y.MYTHIC),new F("Payday",[new X("Get paid. Earn {formula} Tadbucks.",[],($)=>{$.owner.setProp("tadbucks",($.owner.getProp("tadbucks")??0)+15*$.card.pow(),$)}).setFormula("15 * {pow}")]).setRarity(Y.BASIC),new F("Bonus Check",[new X("Get paid. Earn {formula} Tadbucks.",[],($)=>{$.owner.setProp("tadbucks",($.owner.getProp("tadbucks")??0)+25*$.card.pow(),$)}).setFormula("25 * {pow}")]).setRarity(Y.COMMON),new F("Corporate Sabotage",[new W("tadbucks",20),new b(3)]).setRarity(Y.RARE),new F("Inflationary Hedging",[new W("tadbucks",35),new X("Increase the power of all cards in your hand and the deck that mention Tadbucks by {formula}",[],($,J)=>{for(let Q of $.owner.cih()){if(!Q)continue;if(Q===$.card)continue;if(Q.getText().toLowerCase().includes("tadbuck")||Q.getName().toLowerCase().includes("tadbuck"))Q.setPow(Q.pow()+$.card.pow())}for(let Q of $.deck.asArray()){if(!Q)continue;if(Q.getText().toLowerCase().includes("tadbuck")||Q.getName().toLowerCase().includes("tadbuck"))Q.setPow(Q.pow()+$.card.pow())}})]).setRarity(Y.RARE),new F("Marketplace Economics",[new W("tadbucks",50),new f("basic_resource_deck",75,!1).setText("Invent market economics. Add basic resources to the game.")])],life_deck:[new F("Job Interview",[new R(new T({name:"Get a Job",description:"Search for a job in Alaska.",cost:[{amt:3,resource:"turns"}],locked:!1},($)=>{$.owner.addUpgrade(new T({name:"Work",description:"Work for 65 Tadbucks.",cost:[{amt:1,resource:"turns"}]},(Q)=>{Q.owner.addResource("tadbucks",65)},!0,1.5))}))]).setRarity(Y.UNCOMMON),new F("Phlebotomy",[new R(new T({name:"Blood Drawing",description:"Take some time to do research on your blood. You get paid for it!",cost:[{amt:1,resource:"turns"},{amt:3,resource:"life"}]},($)=>{$.owner.addResource("tadbucks",5),$.owner.addResource("knowledge",5)},!0,1.2))]).setRarity(Y.UNCOMMON),new F("Crusader Kings III Level of Immortality",[new W("life",2500),new i("achieving immortality")]).setRarity(Y.MYTHIC),new F("Going to the Gym",[new X("Gain {formula} life",[],($,J)=>{$.owner.setProp("res_life",$.owner.getProp("res_life")+5*$.card.pow(),$)}).setFormula("5 * {pow}")]).setRarity(Y.COMMON),new F("Assassinate",[new X("Kill an opponent. They discard their hand.",[{pointer:Z.OPPONENT_MOST_CARDS,choice:N.OPPONENT}],($,J)=>{let Q=J[0];Q.setProp("res_life",0,$);while(Q.inHand()>0)Q.discard(Q.cih()[0],$.deck)})]).setRarity(Y.HAXOR),new F("Soul Cancer",[new X("Whenever you play a card, lose {formula} life",[],($,J)=>{$.owner.addEvent("play",(Q)=>{if(!Q.owner.getProp("res_life"))Q.owner.setProp("res_life",Q.card.pow(),Q);Q.owner.setProp("res_life",Q.owner.getProp("res_life")-Q.card.pow(),Q)})})]).setRarity(Y.RARE),new F("2024 Presidential Debate",[new g,new D(1)]).setRarity(Y.UNCOMMON)],point_deck:[new F("Point of Pity",[new X("If you have -{formula} or fewer points, you win the game on your next turn",[],($,J)=>{if($.owner.getProp("points")<=-(100-$.card.pow()))$.owner.setCanWin(!0,"had a point of pity")}).setFormula("100 - {pow}")]).setRarity(Y.RARE),new F("Pointlessify",[new X("Reduce all point values in an opponents hand to -1. Gain points equal to the difference.",[{pointer:Z.OPPONENT_MOST_CARDS,choice:N.OPPONENT}],($,J)=>{let Q=J[0],K=0;for(let V of Q.cih())if(V.getProp("point_value")){if(V.getProp("point_value")>-1)K+=V.getProp("point_value")+1;V.setProp("point_value",-1)}$.owner.setProp("points",($.owner.getProp("points")??0)+K,$)})]).setRarity(Y.RARE),new F("Pontificate",[new X("Gain {formula} points.",[],($,J)=>{$.owner.setProp("points",$.owner.getProp("points")+$.card.pow(),$)}),new X("Randomly add points to all cards in the deck",[],($,J)=>{for(let Q of $.deck)if(Q.getProp("point_value"))Q.setProp("point_value",Q.getProp("point_value")+Math.floor(Math.random()*Q.pow()));else Q.setProp("point_value",[-Q.pow(),0,0,1,1,Q.pow()].sort((K,V)=>Math.random()-0.5)[0])})]).setRarity(Y.BASIC)],faith_deck:[new F("Thoughts and Prayers",[new G(1,"faith"),new D(1),new X("Slow your roll. You pray instead of getting closer to winning",[],($,J)=>$.owner.addTurns(1))]).setRarity(Y.BASIC)],basic:[new F("Oozify",[new X("Choose a card in your hand. Split it into {formula} weaker cards.",[{pointer:Z.CARD_IN_HAND_MOST_POWER,choice:N.CARD_IN_HAND}],($,J)=>{let Q=J[0],K=[];for(let V=0;V<$.card.pow();V++){let j=Q.clone().setPow(Math.floor(1/$.card.pow()*Q.pow()));j.setName(`Oozing ${j.getName()}`),j.setRarity(Math.max(0,j.getRarity()-1)),K.push(j)}$.owner.cih().splice($.owner.cih().indexOf(Q),1),$.owner.cih().push(...K)}).setCanPlay(($)=>{return $.owner.cih().length>1}).setFormula("{pow} + 1")]).setRarity(Y.RARE),new F("You Could Make a Religion Outta This",[new f("faith_deck",75,!0).setText("Invent religion."),new G(1,"faith"),new m]).setRarity(Y.RARE),new F("What's the Point?",[new f("point_deck",75,!0).setText("Invent points. Add points to the game."),new F0("points_to_win",100).setText("First player to 100 points wins on their next turn!"),new r(["play"],($)=>{if($.card.getProp("point_value")){let J=$.card.getProp("point_value")??0;J*=0.75+$.card.pow()*0.25,$.owner.setProp("points",($.owner.getProp("points")??0)+J,$)}}).setText("Whenever someone plays a card, they get however many points that card is worth."),new r(["points_change"],($)=>{if($.owner.getProp("points")>=$.owner.getProp("points_to_win"))$.owner.setCanWin(!0,"saw the point")}).setText("Every time someone's score changes, check if they can win."),new X("For each card in the deck, assign a random point value!",[],($,J)=>{let Q=[-7,-5,-3,-2,-2,-1,-1,-1,-1,-1,0,0,0,0,0,0,1,1,1,1,1,1,2,2,3,3,5,10];for(let K of $.deck.asArray())K.setProp("point_value",Q[Math.floor(Math.random()*Q.length)])}),new m]).setRarity(Y.LEGENDARY),new F("Agonize over a Decision",[new D(3),new U(3)]).setRarity(Y.UNCOMMON),new F("Skip Bitch",[new X("Skip an opponents turn",[{pointer:Z.OPPONENT_MOST_CARDS,choice:N.OPPONENT}],($,J)=>{J[0].skip()})]).setRarity(Y.UNCOMMON),new F("Megaskip Bitch",[new X("Skip an opponents next {formula} turns",[{pointer:Z.OPPONENT_MOST_CARDS,choice:N.OPPONENT}],($,J)=>{let Q=J[0];Q.skip(),Q.skip()}).setFormula("1 + {pow}")]).setRarity(Y.HAXOR),new F("Housing Economy Crash",[new X("Each player discards all cards above common rarity",[],($,J)=>{let Q=[$.owner,...$.opps];for(let K of Q){let V=K.cih().filter((j)=>{if(!j)return!1;return j.getRarity()>Y.COMMON});for(let j of V)K.discard(j,$.deck)}})]).setRarity(Y.RARE),new F("Tactical Cuckage",[new b(2),new U(3),new X("Make an opponent skip a turn",[{pointer:Z.OPPONENT_MOST_CARDS,choice:N.OPPONENT}],($,J)=>{J[0].skip()}),new D(1)]).setRarity(Y.MYTHIC),new F("Supercharge",[new t(1)]).setRarity(Y.UNCOMMON),new F("Gifts of Giving",[new D(1),new K0(1)]).setRarity(Y.COMMON),new F("Minor Cucking",[new b(1)]).setRarity(Y.COMMON),new F("Gifted Sabotage",[new U(2)]).setRarity(Y.COMMON),new F("Basic Bitchery",[new D(1)]).setRarity(Y.BASIC),new F("Change of Perspective",[new V0(2)]).setRarity(Y.RARE),new F("Speedbump",[new X("Increase everyone else's cards to play by {formula}",[],($,J)=>{$.opps.forEach((Q)=>{Q.addTurns($.card.pow())})})]).setRarity(Y.BASIC),new F("Encrust in Gold",[new X("Increase a card in your hands rarity. It gains {formula} power",[{choice:N.CARD_IN_HAND,pointer:Z.CARD_IN_HAND_LEAST_POWER}],($,J)=>{let Q=J[0];Q.setRarity(Q.getRarity()+1),Q.setPow(Q.pow()+$.card.pow()+2),Q.setName(`Golden ${Q.getName()} \uD83D\uDCB0\uD83D\uDCB0`)}).setFormula("{pow} + 2")]).setRarity(Y.RARE),new F("Scrap Buyback",[new a(1).setFormula("{pow}")]).setRarity(Y.UNCOMMON),new F("Rough Breakup",[new e,new X("Reduce the power of cards in your hand by {formula}",[],($,J)=>{$.owner.cih().forEach((Q)=>{Q.setPow(Q.pow()-$.card.pow())})}).setFormula("{pow}")]),new F("Mutual Cuckage",[new X("Increase everyone's cards to play to win by {formula}",[],($,J)=>{[$.owner,...$.opps].forEach((Q)=>{Q.addTurns(10+$.card.pow())})}).setFormula("10 + {pow}")]).setRarity(Y.RARE),new F("Even the Playing Field",[new $0("Play only if you aren't the first player",($)=>{return $.owner.getTurnPlacement()>0}),new X("Decrease your cards to play to win by {formula}",[],($,J)=>{$.owner.addTurns(-(3+$.card.pow()))}).setFormula("3 + {pow}")]).setRarity(Y.UNCOMMON),new F("Denial",[new X("Increase an opponent's cards to play to win by {formula}",[{choice:N.OPPONENT,pointer:Z.OPPONENT_LEAST_TURNS_REMAINING}],($,J)=>{J[0].addTurns($.card.pow()*2)}).setFormula("{pow} * 2")]).setRarity(Y.COMMON),new F("Get a Life",[new G(10,"life"),new f("life_deck",50,!0)]).setRarity(Y.RARE),new F("Proletariat Revolution",[new $0("Play only if you're the first player",($)=>{return $.owner.getTurnPlacement()===0}),new X("Draw {formula} cards.",[],($,J)=>{if($.owner.getTurnPlacement()===0)$.owner.draw($.deck,$.card.pow()+2)}).setFormula("{pow} + 2")]).setRarity(Y.COMMON),new F("Pile o' Crap",[new Y0("\uD83D\uDCA9")]).setRarity(Y.BASIC).setProp("crap",!0),new F("Beanz It",[new X('Add "Add {formula} turns to an opponent" to a card in your hand.',[{choice:N.CARD_IN_HAND,pointer:Z.CARD_IN_HAND_RANDOM}],($,J)=>{let Q=J[0];Q.setName(`Bean-Fueled ${Q.getName()} \uD83E\uDED8`),Q.addAbility(new j0($.card.pow()-Q.pow()))}).setFormula("{pow}")]).setRarity(Y.COMMON),new F("Community Service Project",[new X('Add "Draw {formula} card" to a card in your hand.',[{choice:N.CARD_IN_HAND,pointer:Z.CARD_IN_HAND_RANDOM}],($,J)=>{let Q=J[0];Q.setName(`Wizened ${Q.getName()}`),Q.addAbility(new D($.card?.pow()-Q.pow()))}).setFormula("{pow}")]).setRarity(Y.COMMON),new F("Academia",[new f("academia_deck",100,!0).setText("Invent student loans. Add academia to the game."),new m]).setRarity(Y.RARE),new F("Currency",[new f("currency_deck",100,!0,!0).setText("Invent currency. Add currency to the game."),new R(new T({name:"Get a Job",description:"Search for a job in Alaska.",cost:[{amt:3,resource:"turns"}],locked:!1},($)=>{$.owner.addUpgrade(new T({name:"Work",description:"Work for 50 Tadbucks.",cost:[{amt:1,resource:"turns"}]},(Q)=>{Q.owner.addResource("tadbucks",50)},!0,1.2))})).setText("You also invent the idea of working for pay."),new m]).setRarity(Y.RARE)]},p=O0;class J0{name;cards=[];skipped=0;props={};events={};turnPlacement=0;turnsRemaining=20;canWin=!1;winReason="cards in hand";handSize=10;bot=!1;host=!1;botProfile=void 0;eventList={};constructor($,J){this.name=Math.random().toString(36).substring(7),this.draw(J,$),this.setProp("meta_upgrade",[]),this.addUpgrade(new T({name:"Meticulous Analysis",description:"Draw a card at the expense of slowing down.",cost:[{amt:1,resource:"turns"}],locked:!1},(Q)=>{Q.owner.draw(Q.deck,1)},!0,1.5)),this.addEvent("draw",(Q)=>{if(!Q.card)return;if(!this.eventList[Q.card.getName()])this.eventList[Q.card.getName()]={drawn:0,played:0,discarded:0,given:0,text:""};this.eventList[Q.card.getName()].drawn++,this.eventList[Q.card.getName()].text=Q.card.getText()}),this.addEvent("play",(Q)=>{if(!this.eventList[Q.card.getName()])this.eventList[Q.card.getName()]={drawn:0,played:0,discarded:0,given:0,text:""};this.eventList[Q.card.getName()].played++,this.eventList[Q.card.getName()].text=Q.card.getText(),Q.owner.addTurns(-1)}),this.addEvent("discard",(Q)=>{if(!Q.card)return;if(!this.eventList[Q.card.getName()])this.eventList[Q.card.getName()]={drawn:0,played:0,discarded:0,given:0,text:""};this.eventList[Q.card.getName()].discarded++,this.eventList[Q.card.getName()].text=Q.card.getText()}),this.addEvent("give",(Q)=>{if(!this.eventList[Q.card.getName()])this.eventList[Q.card.getName()]={drawn:0,played:0,discarded:0,given:0,text:""};this.eventList[Q.card.getName()].given++,this.eventList[Q.card.getName()].text=Q.card.getText()}),this.addEvent("res_life_change",(Q)=>{if(this.getProp("res_life")<=0){if(!Q.deck)return;if(!Q.deck.props.added_zombie_deck)Q.deck.addCards(I.fromCardList(45,p.zombie_deck)),Q.deck.shuffle(),Q.deck.props.added_zombie_deck=!0}})}addResource($,J){if($.startsWith("res_"))$=$.substring(4);if(!this.getProp(`res_${$}`))this.setProp(`res_${$}`,0);this.setProp(`res_${$}`,this.getProp(`res_${$}`)+J)}upgrades(){return this.props.meta_upgrade||[]}addUpgrade($){if(!this.props.meta_upgrade)this.props.meta_upgrade=[];this.props.meta_upgrade.push($),this.fireEvents("new_upgrade",{owner:this,opps:[],deck:void 0,card:void 0})}setHost($=!0){return this.host=$,this}isHost(){return this.host}getResources(){let $={};for(let J in this.props)if(J.startsWith("res_"))$[J.substring(4)]=this.props[J];return $.turns=Infinity,$}getUIs(){return{marketplace:this.props.marketplace||!1,gene_bank:this.props.gene_bank||!1,casino:this.props.casino||!1,upgrade:!0}}getRelevantProps(){let $={};for(let J in this.props)if(!J.startsWith("meta_"))$[J]=this.props[J];return $}getPrivate($=!1){return{name:this.name,cards:this.cards.length,handsize:this.handSize,skipped:this.skipped,props:this.getRelevantProps(),turnsRemaining:this.turnsRemaining,canWin:this.canWin,winReason:this.winReason,host:this.host,you:$,order:this.turnPlacement}}getCards($,J){return this.cards.map((Q)=>({name:Q.getName(),text:Q.getFormulatedText({owner:this,opps:$,deck:J,card:Q}),rarity:Q.getRarity(),power:Q.pow(),formula:Q.getFormulas(),props:Q.getProps(),playable:Q.canBePlayed({owner:this,opps:$,deck:J,card:Q})}))}setBot(){return this.bot=!0,this.botProfile=new C(Object.keys(u)[Math.floor(Math.random()*Object.keys(u).length)]),this}isBot(){return this.bot}setName($){return this.name=$,this}getCardStats(){return this.eventList}setTurnPlacement($){return this.turnPlacement=$,this}getTurnPlacement(){return this.turnPlacement}getHandsize(){return this.handSize}addHandsize($){return this.handSize+=$,this}setHandsize($){return this.handSize=$,this}propList(){return this.props}on($,J){return this.addEvent($,J),this}addEvent($,J){if(!this.events[$])this.events[$]=[];this.events[$].push(J)}getWinReason(){return this.winReason}fireEvents($,J){if(this.events[$])for(let Q of this.events[$])Q(J);if(this.events[`temp_${$}`]){for(let Q of this.events[`temp_${$}`])Q(J);delete this.events[`temp_${$}`]}}addTurns($){if(this.turnsRemaining+=$,this.turnsRemaining<=0)this.setCanWin(!0,"plodded across the finish line");return this}setTurns($){return this.turnsRemaining=$,this}getTurns(){return this.turnsRemaining}rollDice(){if(this.getProp("dice")){let $=this.getProp("dice");return $[Math.floor(Math.random()*$.length)]}return-1}setCanWin($,J="cards in hand"){if(this.canWin=$,this.winReason=J,this.canWin)this.fireEvents("can_win",{owner:this,opps:[],card:void 0,deck:void 0});return this}winCheck(){return this.canWin}setProp($,J,Q){if(this.props[$]=J,Q)this.fireEvents(`${$}_change`,Q);return this}getProps(){return this.props}getProp($){return this.props[$]||0}skip(){this.skipped++}skipCheck(){if(this.skipped>0)return this.skipped--,!0;return!1}toPlayerState(){return{name:this.name,cards:this.cards.length,handsize:this.handSize,skipped:this.skipped,props:this.props,turnsRemaining:this.turnsRemaining,canWin:this.canWin,winReason:this.winReason,host:this.host,you:!1,order:this.turnPlacement}}getLogText(){return`\xA7\xA7${this.bot?`<b>[${this.botProfile.getProfileName()}]</b> `:""}${this.host?"<b>[HOST]</b> ":""}${this.name}\xA7player\xA7${JSON.stringify(this.toPlayerState())}\xA7\xA7`}getName(){return this.name}cih(){return this.cards}setCiH($){return this.cards=$,this}inHand(){return this.cards.length}turnStart($){for(let J of this.cards)J.fireEvents("turn_start",{...$,card:J})}draw($,J=1){let Q=$.draw(J);for(let K of Q)if(K.draw(this,[],$),this.fireEvents("draw",{owner:this,opps:[],deck:$,card:K}),J>=1)this.cards=this.cards.concat(K)}play($,J,Q,K){if(this.cards.splice(this.cards.indexOf($),1),!$.doSkipDiscard())Q.discardPile.push($);$.play(this,J,Q,K),this.fireEvents("play",{owner:this,opps:J,deck:Q,card:$})}give($,J){$.give(this,[J],void 0),this.fireEvents("give",{owner:this,opps:[],deck:void 0,card:$}),J.cards.push($),this.cards.splice(this.cards.indexOf($),1)}discard($,J){$.discard(this,[],J),this.fireEvents("discard",{owner:this,opps:[],deck:J,card:$}),J.discardPile.push($),this.cards.splice(this.cards.indexOf($),1)}discardRandom($){let J=this.cih()[Math.floor(Math.random()*this.cih().length)];if(J)this.discard(J,$.deck)}discardChoose($){let J=this.weightedDiscard($);if(J)this.discard(J,$.deck)}randomCard(){return this.cards[Math.floor(Math.random()*this.cards.length)]}weightedDiscard($){let J=Infinity,Q=null;for(let K of this.cards)if(K&&this.botProfile){let V=this.botProfile.evaluate(K,$);if(V<J*(0.8+Math.random()*0.4))J=V,Q=K}return Q}weightedDiscardToHand($){if(this.cih().length>this.getHandsize())while(this.cih().length>this.getHandsize()){let J=this.weightedDiscard($);if(J||!$.deck)this.discard(J,$.deck);else return}}weightedGive($){let J=Infinity,Q=null;for(let K of this.cards)if(K&&this.botProfile){let V=this.botProfile.evaluate(K,$);if(V<J*(0.8+Math.random()*0.4))J=V,Q=K}return Q}weightedPlay($){let J=(-Infinity),Q=null;for(let K of this.cards)if(K&&this.botProfile){let V=this.botProfile.evaluate(K,$);if(V>J*(0.8+Math.random()*0.4)&&K.canBePlayed($))J=V,Q=K}return Q}getEvent($){return this.events[$]}removeEvent($){return delete this.events[$],this}selectChoices($,J){return[]}evaluate($,J){return 0}}var L;(function(H){H[H["CONNECTED"]=0]="CONNECTED";H[H["DISCONNECTED"]=1]="DISCONNECTED";H[H["SET_NAME"]=2]="SET_NAME";H[H["UPDATE_PLAYER_STATE"]=3]="UPDATE_PLAYER_STATE";H[H["SERVER_MSG"]=4]="SERVER_MSG";H[H["ADD_BOT"]=5]="ADD_BOT";H[H["KICK_PLAYER"]=6]="KICK_PLAYER";H[H["TRANSFER_UPGRADE_SHOP"]=7]="TRANSFER_UPGRADE_SHOP";H[H["BUY_UPGRADE"]=8]="BUY_UPGRADE";H[H["TRANSFER_MARKETPLACE"]=9]="TRANSFER_MARKETPLACE";H[H["DRAW_CARD"]=10]="DRAW_CARD";H[H["PLAY_CARD"]=11]="PLAY_CARD";H[H["GIVE_CARD"]=12]="GIVE_CARD";H[H["DISCARD_TO_HAND"]=13]="DISCARD_TO_HAND";H[H["GET_CHOICES"]=14]="GET_CHOICES";H[H["CHOICE_LIST"]=15]="CHOICE_LIST";H[H["ERROR"]=16]="ERROR"})(L||(L={}));import{WebSocketServer as W0} from"ws";class l{players={};sockets={};deck;turnPhase=0;activeTurn="";logEntries=[];sendableLogs=[];serverObj=void 0;serverPort=15912;serverConfig={startingHand:4,maxPlayers:6,minPlayers:1,fairness:!0};constructor(){this.deck=I.fromCardList(60,p.basic),this.deck.shuffle()}reset(){if(this.serverObj)this.serverObj.close();this.deck=I.fromCardList(60,p.basic),this.deck.shuffle(),this.sockets={},this.players={},this.turnPhase=0,this.activeTurn="",this.sendableLogs=[],this.log("Server reset!"),this.init(this.serverPort)}static createName(){return[["Cheddar","Swiss","Sewer","Moist","Crusty","Crunchy","Crispy","Bam","Bang","Slam","Meow","Bark","Grand","Del","Dip","Rich","Povert","Rogue","Joleto","Tad","Italian","Spicy","Salty","Sweet","Sour","Bitter","Stinky","Irritating","Meaty","Cool","Neato","Awesome","Sassy"],["amole","lotion","bacon","slice","sliver","fluid","ian","jess","tad","Loaf","Crust","Crunch","Crisp","Ioli","Head","Ino","Pants","Zilla","Shirt","Shoes","Hat","Glove","Sock","Spaghetti","Oritto","Ravioli","Gnocchi","Chilada","Pierogi","Burrito","Taco","Enchilada","Tamale","Changa","Dilla","Nachos","Tilla","Chip","Salsa","Guacamole","Asaurus","Eratops"],[" Mc"," "," "," "," "," "," "," "," Mac"," O'"],["Pan","Tad","Crap","Gene","Friendly","Spicy","Hate","Spinach","Slam","Magic","Eraser","Bougie","Ball","Supremo","Bean","Burger","Bread","Biscuit","Bacon","Bun","Biscuit","Burger","Bread","Kitty","Wood","Morning","Soft","Hard","Raging","",""],["Plumbing","Orama","Adic","Tastic","Full","Loaf","Fruit","Table","Chair","Brian","Brain","Atomy","Acist","Ologist","Doofus","Dorkus","Itis","Person","Biden","Trump","Obama","Bush","Clinton","Reagan","Carter","Folk","Ford","Sandal","Muncher","Potato","Whiskey","Bourbon"]].map((J,Q)=>{let K=J[Math.floor(Math.random()*J.length)];if(Q>0&&!K.startsWith(" "))K=K.toLowerCase();return K}).join("").split(" ").map((J)=>J[0].toUpperCase()+J.substring(1).toLowerCase()).join(" ")}log($){console.log($),this.logEntries.push($.toString())}gameLog($){this.sendableLogs.push($)}getDeck(){return this.deck}addPlayer(){if(this.serverConfig.fairness)Object.values(this.players).forEach((J)=>J.addTurns(1));let $=Math.random().toString(36).substring(7);if(this.players[$]=new J0(this.serverConfig.startingHand,this.deck).setTurnPlacement(Object.keys(this.players).length),this.players[$].addEvent("new_upgrade",(J)=>{this.updateUpgradeShop($)}),this.activeTurn==="")this.activeTurn=$,this.players[$].setHost();return{id:$,index:Object.keys(this.players).length-1}}addBot(){if(this.serverConfig.fairness)Object.values(this.players).forEach((J)=>J.addTurns(1));let $=Math.random().toString(36).substring(7);return this.players[$]=new J0(this.serverConfig.startingHand,this.deck).setTurnPlacement(Object.keys(this.players).length).setName(l.createName()).setBot(),this.gameLog(`${this.players[$].getLogText()} joined the game as a bot.`),$}incrementPhase(){let $={owner:this.getActive(),opps:Object.values(this.players).filter((V)=>V!==this.getActive()),deck:this.deck},J=Object.keys(this.players).length>=2&&this.getActive().cih().length>=2&&this.getActive().cih().some((V)=>V.canBeGiven(this.getActive(),{...$,card:V})),Q=this.getActive().cih().some((V)=>V.canBePlayed({owner:this.getActive(),opps:Object.values(this.players).filter((j)=>j!==this.getActive()),deck:this.deck,card:V}))||this.getActive().getProp("meta_upgrade").some((V)=>{return V.getData($)}),K=this.getActive().cih().length>this.getActive().getHandsize();if(this.turnPhase===0)if(J)this.turnPhase=1;else if(Q)this.turnPhase=2;else if(K)this.turnPhase=3;else this.incrementTurn();else if(this.turnPhase===1)if(Q)this.turnPhase=2;else if(K)this.turnPhase=3;else this.incrementTurn();else if(this.turnPhase===2)if(K)this.turnPhase=3;else this.incrementTurn();this.updateAllStates()}incrementTurn(){if(this.gameLog(`${this.getActive().getLogText()} ended their turn.`),this.gameLog("===NEW TURN==="),this.turnPhase=0,Object.values(this.players).length==0)this.activeTurn="",this.updateAllStates();else if(this.activeTurn=Object.keys(this.players)[(Object.keys(this.players).indexOf(this.activeTurn)+1)%Object.keys(this.players).length],this.gameLog(`${this.getActive().getLogText()} begins their turn.`),this.updateAllStates(),this.getActive().skipCheck())this.gameLog(`${this.getActive().getLogText()} is skipped.`),this.incrementTurn();else if(this.getActive().isBot())this.playBotTurn()}playBotTurn(){let $=Object.keys(this.players).filter((V)=>V!==this.activeTurn).map((V)=>this.players[V]),J={owner:this.getActive(),opps:$,deck:this.deck};this.getActive().draw(this.deck,1),this.gameLog(`${this.getActive().getLogText()} draws a card.`);let Q=null;try{Q=this.getActive().cih().filter((V)=>V.canBePlayed({...J,card:V}))}catch(V){this.gameLog(`${this.getActive().getLogText()} has an error in their hand: ${V}`)}if(this.turnPhase=1,this.updateAllStates(),this.getActive().cih().length>=2){let V=this.getActive().weightedGive(J);if(V){let j=$[Math.floor(Math.random()*$.length)];this.gameLog(`${this.getActive().getLogText()} gives ${V.getLogText()} to ${j.getLogText()}.`),this.getActive().give(V,j)}}else this.gameLog(`${this.getActive().getLogText()} doesn't have enough cards to be generous.`);let K=Q.length>0;if(K)this.turnPhase=2;else this.turnPhase=3;if(this.updateAllStates(),K){let V=this.getActive().weightedPlay(J);if(V)this.gameLog(`${this.getActive().getLogText()} plays ${V.getLogText()}.`),this.getActive().play(V,$,this.deck);this.turnPhase=3,this.updateAllStates()}this.getActive().weightedDiscardToHand(J),this.incrementTurn()}updateUpgradeShop($){this.sockets[$].send(JSON.stringify({type:L.TRANSFER_UPGRADE_SHOP,shop:this.getActive().getProp("meta_upgrade").map((Q)=>{return Q.getData({owner:this.players[$],opps:[],deck:this.deck})})}))}disconnect($,J=""){for(let Q of this.players[$].cih())this.deck.discardPile.push(Q);if($===this.activeTurn)this.incrementTurn();if(this.log(`Player ${$} disconnected (${this.players[$].getLogText()}) - ${J}`),this.gameLog(`${this.players[$]} disconnected.`),this.sockets[$])this.sockets[$].send(JSON.stringify({type:L.SERVER_MSG,message:J})),this.sockets[$].send(JSON.stringify({type:L.DISCONNECTED}));if(delete this.players[$],delete this.sockets[$],this.serverConfig.fairness)Object.values(this.players).forEach((Q)=>Q.addTurns(-1));if(Object.keys(this.players).length>0){let Q=Object.keys(this.players).find((K)=>!this.players[K].isBot());if(Q)this.players[Q].setHost(),this.gameLog(`${this.players[Q]} is now the host.`);else this.log("No non-bots left, server entering reset mode"),this.reset()}if(Object.keys(this.players).length===0)this.activeTurn="",this.log("No non-bots left, server entering reset mode"),this.reset();this.updateAllStates()}getActive(){if(this.activeTurn==="")throw new Error("No active turn");return this.players[this.activeTurn]}sendState($){let J=Object.keys(this.players).filter((V)=>V!==$).map((V)=>this.players[V]),Q=Object.keys(this.players).indexOf(this.activeTurn),K=Object.keys(this.players).indexOf($);if(this.players[$].isBot())return;this.sockets[$].send(JSON.stringify({type:L.UPDATE_PLAYER_STATE,state:{game:{players:Object.values(this.players).map((V,j)=>V.getPrivate(j===K)),turnPhase:this.turnPhase,uis:this.players[$].getUIs(),activeTurn:Q,deck:this.deck.length,config:this.serverConfig,logs:this.sendableLogs.map((V)=>V.toString()),discard:this.deck.discardPile.map((V)=>({name:V.getName(),text:V.getFormulatedText({owner:this.players[$],opps:J,deck:this.deck,card:V}),rarity:V.getRarity(),props:V.getProps()}))},personal:this.players[$].getCards(J,this.deck)}}))}updateAllStates(){Object.keys(this.players).forEach(($)=>this.sendState($))}init($=15912){let J=this;J.log(`Server initialized on port ${$}`),this.serverPort=$,this.serverObj=new W0({port:$}),this.serverObj.on("connection",function Q(K){K.on("message",function j(z){J.log(`Message received: ${z}`);let O=JSON.parse(z),M=O.id,B=Object.keys(J.players).filter((h)=>h!==M).map((h)=>J.players[h]);switch(O.type){case L.SET_NAME:if(O.name.length<1)O.name=l.createName();J.players[M].setName(O.name),J.gameLog(`${J.players[M].getLogText()} joined the game`),J.updateAllStates();break;case L.DRAW_CARD:if(J.activeTurn==M&&J.turnPhase==0)J.players[M].draw(J.deck,1),J.gameLog(`${J.players[M].getLogText()} drew a card.`),J.incrementPhase();else if(J.activeTurn!==M)K.send(JSON.stringify({type:L.ERROR,message:"This card can't be played - not your turn."}));else K.send(JSON.stringify({type:L.ERROR,message:"This card can't be played - not the draw phase."}));J.updateAllStates();break;case L.GIVE_CARD:let h=O.idInHand,Q0=Object.keys(J.players)[O.target];if(J.activeTurn==M&&J.turnPhase==1&&Q0!==M&&J.players[M].cih().length>=2&&J.players[M].cih()[h].canBeGiven(J.players[Q0],{card:J.players[M].cih()[h],owner:J.players[M],opps:B,deck:J.deck}))J.gameLog(`${J.players[M].getLogText()} gives ${J.players[M].cih()[h].getLogText()} to ${J.players[Q0].getLogText()}.`),J.players[M].give(J.players[M].cih()[h],J.players[Q0]),J.incrementPhase();else if(J.activeTurn===M)K.send(JSON.stringify({type:L.ERROR,message:"This card can't be gifted - not your turn."}));else if(J.turnPhase!==1)K.send(JSON.stringify({type:L.ERROR,message:"This card can't be gifted - not the give phase."}));else if(J.players[M].cih().length<2)J.gameLog(`${J.players[M].getLogText()} doesn't have enough cards to be generous.`),J.incrementPhase();else K.send(JSON.stringify({type:L.ERROR,message:"This card can't be gifted - not giveable to this player."}));break;case L.GET_CHOICES:let H0=O.idInHand,A=J.players[M].cih()[H0];if(A.canBePlayed({owner:J.players[M],opps:B,deck:J.deck,card:A})&&J.activeTurn===M&&J.turnPhase==2){let q=JSON.stringify({type:L.CHOICE_LIST,card:H0,splits:A.getAbilities().map((E)=>E.getChoices().length),choices:A.getChoices({owner:J.players[M],opps:B,deck:J.deck,card:A})});K.send(q)}else if(J.activeTurn===M)K.send(JSON.stringify({type:L.ERROR,message:"This card can't have choices selected - not your turn."}));else if(J.turnPhase!==2)K.send(JSON.stringify({type:L.ERROR,message:"This card can't be played - not the play phase."}));else K.send(JSON.stringify({type:L.ERROR,message:"This card can't be played"}));break;case L.PLAY_CARD:let Z0=O.idInHand,x=J.players[M].cih()[Z0],M0=O.choices,H=M0.map((q,E)=>{let v=x.orderAbilities()[E];return q.map((d,L0)=>{switch(v.informChoices({owner:J.players[M],opps:B,deck:J.deck,card:x})[L0].choice){case N.OPPONENT:case N.PLAYER:return J.players[Object.keys(J.players)[d]];case N.CARD_IN_HAND:return J.players[M].cih()[d];case N.CARD_IN_DISCARD:return J.deck.discardPile[d]}})});if(J.activeTurn===M&&J.turnPhase==2&&x.canBePlayed({owner:J.players[M],opps:B,deck:J.deck,card:x})){let q={owner:J.players[M],opps:B,deck:J.deck,card:x};if(x.getChoices(q).length>0)J.gameLog(`${J.players[M].getLogText()} plays ${x.getLogText()} with the following choices:\n${M0.map((E,v)=>`${x.orderAbilities()[v].getFormulatedText(q)}: ${H[v].map((d)=>d.getLogText()).join(", ")}`).join("\n")}`);else J.gameLog(`${J.players[M].getLogText()} plays ${x.getLogText()}.`);J.players[M].play(x,B,J.deck,H),J.incrementPhase()}else if(J.activeTurn===M)K.send(JSON.stringify({type:L.ERROR,message:"This card can't be played - not your turn."}));else if(J.turnPhase!==2)K.send(JSON.stringify({type:L.ERROR,message:"This card can't be played - not the play phase."}));else K.send(JSON.stringify({type:L.ERROR,message:"This card can't be played - not playable."}));break;case L.DISCARD_TO_HAND:let z0=O.idInHand;if(J.activeTurn!==M)K.send(JSON.stringify({type:L.ERROR,message:"This card can't be discarded - not your turn."}));else if(J.turnPhase!==3)K.send(JSON.stringify({type:L.ERROR,message:"This card can't be discarded - not the discard phase."}));else if(J.players[M].cih().length<=J.players[M].getHandsize())K.send(JSON.stringify({type:L.ERROR,message:"This card can't be discarded - you don't have enough cards in hand."})),J.updateAllStates(),J.incrementTurn();else for(let q of z0)if(J.players[M].cih().length>=q+1){let E=[J.players[M].cih()[q]];J.players[M].setCiH(J.players[M].cih().filter((v)=>!E.includes(v)));for(let v of E)J.deck.discardPile.push(v);if(J.updateAllStates(),J.players[M].cih().length<=J.players[M].getHandsize())break}break;case L.ADD_BOT:if(J.players[M].isHost())J.addBot(),J.updateAllStates();else K.send(JSON.stringify({type:L.ERROR,message:"You can't add a bot - you aren't the host."}));break;case L.KICK_PLAYER:if(J.players[M].isHost()){let q=O.target,E=Object.keys(J.players)[q];if(E===M)K.send(JSON.stringify({type:L.ERROR,message:"You can't kick yourself."}));else J.gameLog(`${J.players[M]} kicked ${J.players[E]}.`),J.disconnect(E,O.message??"The host hated your guts.")}else K.send(JSON.stringify({type:L.ERROR,message:"You can't kick a player - you aren't the host."}));break;case L.TRANSFER_UPGRADE_SHOP:if(J.getActive().getUIs().upgrade)J.updateUpgradeShop(M);else K.send(JSON.stringify({type:L.ERROR,message:"You haven't unlocked the upgrade shop."}));break;case L.BUY_UPGRADE:let o=O.upgrade,c=J.getActive().getProp("meta_upgrade");if(J.activeTurn!==M)K.send(JSON.stringify({type:L.ERROR,message:"You can't buy an upgrade - not your turn."}));else if(!J.getActive().getUIs().upgrade)K.send(JSON.stringify({type:L.ERROR,message:"You can't buy an upgrade - you haven't unlocked the upgrade shop."}));else if(J.turnPhase!==2)K.send(JSON.stringify({type:L.ERROR,message:"You can't buy an upgrade - not the play phase."}));else if(c.length<=o||o<0||c[o].locked()||!c[o].canPayCost({owner:J.getActive(),opps:B,deck:J.deck}))K.send(JSON.stringify({type:L.ERROR,message:"You can't buy an upgrade - invalid upgrade."}));else c[o].unlock({owner:J.getActive(),opps:B,deck:J.deck}),J.gameLog(`${J.getActive().getLogText()} bought ${c[o].getData({owner:J.getActive(),opps:B,deck:J.deck}).name}.`),J.incrementPhase(),J.updateAllStates(),J.updateUpgradeShop(M);break}}),K.on("close",function j(z,O){let M=Object.keys(J.sockets).find((B)=>J.sockets[B]===K);J.disconnect(M)});let V=J.addPlayer();J.sockets[V.id]=K,K.send(JSON.stringify({type:L.CONNECTED,connected:V.id,host:Object.keys(J.players)[0]==V.id,turn:V.index}))})}}var G0=new l;G0.init(15912);
